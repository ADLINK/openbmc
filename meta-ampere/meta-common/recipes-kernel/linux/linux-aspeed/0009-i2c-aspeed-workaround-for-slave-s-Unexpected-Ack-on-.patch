From 0ae7ac2bdce1374495bb4ebccf248b46f5d024ba Mon Sep 17 00:00:00 2001
From: Hieu Vu <hvu@amperecomputing.com>
Date: Thu, 22 Oct 2020 04:24:00 +0000
Subject: [PATCH 9/9] =?UTF-8?q?i2c:aspeed:=20workaround=20for=20slave?=
 =?UTF-8?q?=E2=80=99s=20"Unexpected=20Ack=20on=20read=20request"?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Commit 2be6b47211e1 (“i2c: aspeed: Acknowledge most interrupts early in
interrupt handler”) moved interrupt acknowledgement to the beginning of
the interrupt handler. The side effect is that somehow it causes the
slave not to receive TX_ACK interrupt while in ASPEED_I2C_SLAVE_READ_PROCESSED
state. This results in “Unexpected Ack on read request” errors and
subsequently the driver cannot recover. This commit moves slave interrupt
acknowledgement to after all slave interrupts are processed as it used
to be before, and retain the logic for master interrupt acknowledgement.

Signed-off-by: Hieu Vu <hvu@amperecomputing.com>
Signed-off-by: Jim Saxman <jsaxman@amperecomputing.com>
---
 drivers/i2c/busses/i2c-aspeed.c | 23 ++++++++++++++---------
 1 file changed, 14 insertions(+), 9 deletions(-)

diff --git a/drivers/i2c/busses/i2c-aspeed.c b/drivers/i2c/busses/i2c-aspeed.c
index 55b8f7484bee..ffe9c4b6ed89 100644
--- a/drivers/i2c/busses/i2c-aspeed.c
+++ b/drivers/i2c/busses/i2c-aspeed.c
@@ -337,6 +337,12 @@ static u32 aspeed_i2c_slave_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		break;
 	}
 
+	if (irq_handled != irq_status)
+		dev_err(bus->dev,
+			"irq handled != irq. expected %x, but was %x\n",
+			irq_status, irq_handled);
+	writel(irq_handled, bus->base + ASPEED_I2C_INTR_STS_REG);
+
 	return irq_handled;
 }
 #endif /* CONFIG_I2C_SLAVE */
@@ -412,6 +418,10 @@ static u32 aspeed_i2c_master_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 	u8 recv_byte;
 	int ret;
 
+	irq_status = readl(bus->base + ASPEED_I2C_INTR_STS_REG);
+	/* Ack all interrupt bits. */
+	writel(irq_status, bus->base + ASPEED_I2C_INTR_STS_REG);
+
 	if (irq_status & ASPEED_I2CD_INTR_BUS_RECOVER_DONE) {
 		bus->master_state = ASPEED_I2C_MASTER_INACTIVE;
 		irq_handled |= ASPEED_I2CD_INTR_BUS_RECOVER_DONE;
@@ -596,6 +606,10 @@ static u32 aspeed_i2c_master_irq(struct aspeed_i2c_bus *bus, u32 irq_status)
 		bus->master_xfer_result = bus->msgs_index + 1;
 	complete(&bus->cmd_complete);
 out_no_complete:
+	if (irq_status != irq_handled)
+		dev_err(bus->dev,
+			"irq handled != irq. expected 0x%08x, but was 0x%08x\n",
+			irq_status, irq_handled);
 	return irq_handled;
 }
 
@@ -606,9 +620,6 @@ static irqreturn_t aspeed_i2c_bus_irq(int irq, void *dev_id)
 
 	spin_lock(&bus->lock);
 	irq_received = readl(bus->base + ASPEED_I2C_INTR_STS_REG);
-	/* Ack all interrupts except for Rx done */
-	writel(irq_received & ~ASPEED_I2CD_INTR_RX_DONE,
-	       bus->base + ASPEED_I2C_INTR_STS_REG);
 	readl(bus->base + ASPEED_I2C_INTR_STS_REG);
 	irq_received &= ASPEED_I2CD_INTR_RECV_MASK;
 	irq_remaining = irq_received;
@@ -652,12 +663,6 @@ static irqreturn_t aspeed_i2c_bus_irq(int irq, void *dev_id)
 			"irq handled != irq. expected 0x%08x, but was 0x%08x\n",
 			irq_received, irq_handled);
 
-	/* Ack Rx done */
-	if (irq_received & ASPEED_I2CD_INTR_RX_DONE) {
-		writel(ASPEED_I2CD_INTR_RX_DONE,
-		       bus->base + ASPEED_I2C_INTR_STS_REG);
-		readl(bus->base + ASPEED_I2C_INTR_STS_REG);
-	}
 	spin_unlock(&bus->lock);
 	return irq_remaining ? IRQ_NONE : IRQ_HANDLED;
 }
-- 
2.18.4

