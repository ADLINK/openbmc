From e022a9e2231513997aaf9679a2195e56867b0e93 Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Fri, 20 Oct 2023 12:38:31 +0700
Subject: [PATCH] dcmi: Support fully power limit setting commands

The correction time, sampling periodic and exception action of power
limit feature have been defined in the phosphor-dbus-interface. This
commit supports configuration power limit attributes via setting dbus
properties of Power.Cap interface.

Tested:
   1. Request to update attributes of power limit via ipmitool
      $ipmitool dcmi power set_limit <parameter> <value>
   2. Display configuration values as step 1.

Change-Id: Id076a7104113f8b4c711e8279dc730a6d630a675
Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 dcmihandler.cpp | 397 ++++++++++++++++++++++++++++++++++++++++++------
 1 file changed, 349 insertions(+), 48 deletions(-)

diff --git a/dcmihandler.cpp b/dcmihandler.cpp
index 31bca0c..2e26a1b 100644
--- a/dcmihandler.cpp
+++ b/dcmihandler.cpp
@@ -26,11 +26,13 @@ using InternalFailure =
 
 void register_netfn_dcmi_functions() __attribute__((constructor));
 
-constexpr auto pcapPath = "/xyz/openbmc_project/control/host0/power_cap";
 constexpr auto pcapInterface = "xyz.openbmc_project.Control.Power.Cap";
 
 constexpr auto powerCapProp = "PowerCap";
 constexpr auto powerCapEnableProp = "PowerCapEnable";
+constexpr auto powerCapExceptActProp = "ExceptionAction";
+constexpr auto powerCapSamplPeriodProp = "SamplingPeriod";
+constexpr auto powerCapCorrectTimeProp = "CorrectionTime";
 
 using namespace phosphor::logging;
 
@@ -66,6 +68,40 @@ enum class DCMIConfigParameters : uint8_t
     DHCPTiming3,
 };
 
+enum class ExceptActOptions : uint8_t
+{
+    NoAction = 0x00,
+    HardPowerOff,
+    Oem02,
+    Oem03,
+    Oem04,
+    Oem05,
+    Oem06,
+    Oem07,
+    Oem08,
+    Oem09,
+    Oem0A,
+    Oem0B,
+    Oem0C,
+    Oem0D,
+    Oem0E,
+    Oem0F,
+    Oem10,
+    LogEventOnly,
+};
+
+namespace DbusExceptAct
+{
+constexpr auto noAction =
+    "xyz.openbmc_project.Control.Power.Cap.ExceptionActions.NoAction";
+constexpr auto hardPowerOff =
+    "xyz.openbmc_project.Control.Power.Cap.ExceptionActions.HardPowerOff";
+constexpr auto logEventOnly =
+    "xyz.openbmc_project.Control.Power.Cap.ExceptionActions.LogEventOnly";
+constexpr auto oem =
+    "xyz.openbmc_project.Control.Power.Cap.ExceptionActions.Oem";
+} // namespace DbusExceptAct
+
 // Refer Table 6-14, DCMI Entity ID Extension, DCMI v1.5 spec
 static const std::map<uint8_t, std::string> entityIdToName{
     {0x40, "inlet"}, {0x37, "inlet"},     {0x41, "cpu"},
@@ -104,18 +140,41 @@ bool isDCMIPowerMgmtSupported()
     return supported;
 }
 
-std::optional<uint32_t> getPcap(ipmi::Context::ptr& ctx)
+std::optional<ipmi::DbusObjectInfo> getPCapObject(ipmi::Context::ptr& ctx)
 {
-    std::string service{};
-    boost::system::error_code ec = ipmi::getService(ctx, pcapInterface,
-                                                    pcapPath, service);
+    static std::optional<ipmi::DbusObjectInfo> pcapObject = std::nullopt;
+
+    if (pcapObject != std::nullopt)
+    {
+        return pcapObject;
+    }
+
+    ipmi::DbusObjectInfo objectPath{};
+    boost::system::error_code ec = ipmi::getDbusObject(ctx, pcapInterface,
+                                                       objectPath);
     if (ec.value())
     {
         return std::nullopt;
     }
+
+    pcapObject = objectPath;
+
+    return pcapObject;
+}
+
+std::optional<uint32_t> getPcap(ipmi::Context::ptr& ctx)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return std::nullopt;
+    }
+
     uint32_t pcap{};
-    ec = ipmi::getDbusProperty(ctx, service, pcapPath, pcapInterface,
-                               powerCapProp, pcap);
+    boost::system::error_code ec = ipmi::getDbusProperty(
+        ctx, pcapObject.value().second.c_str(),
+        pcapObject.value().first.c_str(), pcapInterface, powerCapProp, pcap);
     if (ec.value())
     {
         log<level::ERR>("Error in getPcap prop",
@@ -123,21 +182,24 @@ std::optional<uint32_t> getPcap(ipmi::Context::ptr& ctx)
         elog<InternalFailure>();
         return std::nullopt;
     }
+
     return pcap;
 }
 
 std::optional<bool> getPcapEnabled(ipmi::Context::ptr& ctx)
 {
-    std::string service{};
-    boost::system::error_code ec = ipmi::getService(ctx, pcapInterface,
-                                                    pcapPath, service);
-    if (ec.value())
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
     {
         return std::nullopt;
     }
+
     bool pcapEnabled{};
-    ec = ipmi::getDbusProperty(ctx, service, pcapPath, pcapInterface,
-                               powerCapEnableProp, pcapEnabled);
+    boost::system::error_code ec =
+        ipmi::getDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapEnableProp, pcapEnabled);
     if (ec.value())
     {
         log<level::ERR>("Error in getPcap prop");
@@ -147,18 +209,98 @@ std::optional<bool> getPcapEnabled(ipmi::Context::ptr& ctx)
     return pcapEnabled;
 }
 
-bool setPcap(ipmi::Context::ptr& ctx, const uint32_t powerCap)
+std::optional<std::string> getPcapExceptAction(ipmi::Context::ptr& ctx)
 {
-    std::string service{};
-    boost::system::error_code ec = ipmi::getService(ctx, pcapInterface,
-                                                    pcapPath, service);
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return std::nullopt;
+    }
+
+    std::string exceptActStr{};
+
+    boost::system::error_code ec =
+        ipmi::getDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapExceptActProp, exceptActStr);
+
     if (ec.value())
+    {
+        log<level::ERR>("Error in getPcap prop",
+                        entry("ERROR=%s", ec.message().c_str()));
+        elog<InternalFailure>();
+        return std::nullopt;
+    }
+
+    return exceptActStr;
+}
+
+std::optional<uint32_t> getPcapCorrectTime(ipmi::Context::ptr& ctx)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return std::nullopt;
+    }
+
+    uint64_t pcapCorrectTimeUs{};
+    boost::system::error_code ec =
+        ipmi::getDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapCorrectTimeProp, pcapCorrectTimeUs);
+    if (ec.value())
+    {
+        log<level::ERR>("Error in getPcap prop");
+        elog<InternalFailure>();
+        return std::nullopt;
+    }
+
+    return (uint32_t)(std::chrono::duration_cast<std::chrono::milliseconds>(
+                          std::chrono::microseconds(pcapCorrectTimeUs)))
+        .count();
+}
+
+std::optional<uint16_t> getPcapSamplPeriod(ipmi::Context::ptr& ctx)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return std::nullopt;
+    }
+
+    uint64_t pcapSamplPeriodUs{};
+    boost::system::error_code ec =
+        ipmi::getDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapSamplPeriodProp, pcapSamplPeriodUs);
+    if (ec.value())
+    {
+        log<level::ERR>("Error in getPcap prop");
+        elog<InternalFailure>();
+        return std::nullopt;
+    }
+
+    return (uint16_t)(std::chrono::duration_cast<std::chrono::seconds>(
+                          std::chrono::microseconds(pcapSamplPeriodUs)))
+        .count();
+}
+
+bool setPcap(ipmi::Context::ptr& ctx, const uint32_t powerCap)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
     {
         return false;
     }
 
-    ec = ipmi::setDbusProperty(ctx, service, pcapPath, pcapInterface,
-                               powerCapProp, powerCap);
+    boost::system::error_code ec =
+        ipmi::setDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapProp, powerCap);
     if (ec.value())
     {
         log<level::ERR>("Error in setPcap property",
@@ -171,16 +313,17 @@ bool setPcap(ipmi::Context::ptr& ctx, const uint32_t powerCap)
 
 bool setPcapEnable(ipmi::Context::ptr& ctx, bool enabled)
 {
-    std::string service{};
-    boost::system::error_code ec = ipmi::getService(ctx, pcapInterface,
-                                                    pcapPath, service);
-    if (ec.value())
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
     {
         return false;
     }
 
-    ec = ipmi::setDbusProperty(ctx, service, pcapPath, pcapInterface,
-                               powerCapEnableProp, enabled);
+    boost::system::error_code ec =
+        ipmi::setDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapEnableProp, enabled);
     if (ec.value())
     {
         log<level::ERR>("Error in setPcapEnabled property",
@@ -191,6 +334,94 @@ bool setPcapEnable(ipmi::Context::ptr& ctx, bool enabled)
     return true;
 }
 
+bool setPcapExceptAction(ipmi::Context::ptr& ctx, std::string pcapExceptAct)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return false;
+    }
+
+    boost::system::error_code ec =
+        ipmi::setDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapExceptActProp, pcapExceptAct);
+    if (ec.value())
+    {
+        log<level::ERR>("Error in setPcap property",
+                        entry("ERROR=%s", ec.message().c_str()));
+        elog<InternalFailure>();
+        return false;
+    }
+
+    return true;
+}
+
+bool setPcapCorrectTime(ipmi::Context::ptr& ctx, uint32_t pcapCorrectTime)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return false;
+    }
+
+    /*
+     * Dbus is storing Correction time in microseconds unit.
+     * Therefore, we have to convert it from milisecond to microseconds.
+     */
+    uint64_t pcapCorrectTimeUs =
+        (uint64_t)(std::chrono::duration_cast<std::chrono::microseconds>(
+                       std::chrono::milliseconds(pcapCorrectTime)))
+            .count();
+    boost::system::error_code ec =
+        ipmi::setDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapCorrectTimeProp, pcapCorrectTimeUs);
+    if (ec.value())
+    {
+        log<level::ERR>("Error in setPcap property",
+                        entry("ERROR=%s", ec.message().c_str()));
+        elog<InternalFailure>();
+        return false;
+    }
+
+    return true;
+}
+
+bool setPcapSamplPeriod(ipmi::Context::ptr& ctx, uint16_t pcapSamplPeriod)
+{
+    std::optional<ipmi::DbusObjectInfo> pcapObject = getPCapObject(ctx);
+
+    if (pcapObject == std::nullopt)
+    {
+        return false;
+    }
+
+    /*
+     * Dbus is storing Sampling periodic in microseconds unit.
+     * Therefore, we have to convert it from seconds to microseconds unit.
+     */
+    uint64_t pcapSamplPeriodUs =
+        (uint64_t)(std::chrono::duration_cast<std::chrono::microseconds>(
+                       std::chrono::seconds(pcapSamplPeriod)))
+            .count();
+    boost::system::error_code ec =
+        ipmi::setDbusProperty(ctx, pcapObject.value().second.c_str(),
+                              pcapObject.value().first.c_str(), pcapInterface,
+                              powerCapSamplPeriodProp, pcapSamplPeriodUs);
+    if (ec.value())
+    {
+        log<level::ERR>("Error in setPcap property",
+                        entry("ERROR=%s", ec.message().c_str()));
+        elog<InternalFailure>();
+        return false;
+    }
+
+    return true;
+}
+
 std::optional<std::string> readAssetTag(ipmi::Context::ptr& ctx)
 {
     // Read the object tree with the inventory root to figure out the object
@@ -327,7 +558,6 @@ bool setDHCPOption(ipmi::Context::ptr& ctx, std::string prop, bool value)
 
 } // namespace dcmi
 
-constexpr uint8_t exceptionPowerOff = 0x01;
 ipmi::RspType<uint16_t, // reserved
               uint8_t,  // exception actions
               uint16_t, // power limit requested in watts
@@ -348,34 +578,53 @@ ipmi::RspType<uint16_t, // reserved
 
     std::optional<uint16_t> pcapValue = dcmi::getPcap(ctx);
     std::optional<bool> pcapEnable = dcmi::getPcapEnabled(ctx);
-    if (!pcapValue || !pcapEnable)
+    std::optional<uint32_t> pcapCorrectTime = dcmi::getPcapCorrectTime(ctx);
+    std::optional<uint16_t> pcapSamplPeriod = dcmi::getPcapSamplPeriod(ctx);
+    std::optional<std::string> pcapExceptAct = dcmi::getPcapExceptAction(ctx);
+
+    if (!pcapValue || !pcapEnable || !pcapCorrectTime || !pcapSamplPeriod ||
+        !pcapExceptAct)
     {
         return ipmi::responseUnspecifiedError();
     }
 
     constexpr uint16_t reserved1{};
     constexpr uint16_t reserved2{};
-    /*
-     * Exception action if power limit is exceeded and cannot be controlled
-     * with the correction time limit is hardcoded to Hard Power Off system
-     * and log event to SEL.
-     */
-    constexpr uint8_t exception = exceptionPowerOff;
-    /*
-     * Correction time limit and Statistics sampling period is currently not
-     * populated.
-     */
-    constexpr uint32_t correctionTime{};
-    constexpr uint16_t statsPeriod{};
-    if (*pcapEnable == false)
+    uint8_t exception;
+
+    std::string exceptAct = pcapExceptAct.value();
+
+    if (exceptAct == dcmi::DbusExceptAct::noAction)
+    {
+        exception = static_cast<uint8_t>(dcmi::ExceptActOptions::NoAction);
+    }
+    else if (exceptAct == dcmi::DbusExceptAct::hardPowerOff)
+    {
+        exception = static_cast<uint8_t>(dcmi::ExceptActOptions::HardPowerOff);
+    }
+    else if (exceptAct == dcmi::DbusExceptAct::logEventOnly)
+    {
+        exception = static_cast<uint8_t>(dcmi::ExceptActOptions::LogEventOnly);
+    }
+    else if (exceptAct == dcmi::DbusExceptAct::oem)
+    {
+        exception = static_cast<uint8_t>(dcmi::ExceptActOptions::Oem02);
+    }
+    else
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
+    if (!pcapEnable.value())
     {
         constexpr ipmi::Cc responseNoPowerLimitSet = 0x80;
         return ipmi::response(responseNoPowerLimitSet, reserved1, exception,
-                              *pcapValue, correctionTime, reserved2,
-                              statsPeriod);
+                              pcapValue.value(), pcapCorrectTime.value(),
+                              reserved2, pcapSamplPeriod.value());
     }
-    return ipmi::responseSuccess(reserved1, exception, *pcapValue,
-                                 correctionTime, reserved2, statsPeriod);
+    return ipmi::responseSuccess(reserved1, exception, pcapValue.value(),
+                                 pcapCorrectTime.value(), reserved2,
+                                 pcapSamplPeriod.value());
 }
 
 ipmi::RspType<> setPowerLimit(ipmi::Context::ptr& ctx, uint16_t reserved1,
@@ -389,10 +638,7 @@ ipmi::RspType<> setPowerLimit(ipmi::Context::ptr& ctx, uint16_t reserved1,
         return ipmi::responseInvalidCommand();
     }
 
-    // Only process the power limit requested in watts. Return errors
-    // for other fields that are set
-    if (reserved1 || reserved2 || reserved3 || correctionTime || statsPeriod ||
-        exceptionAction != exceptionPowerOff)
+    if (reserved1 || reserved2 || reserved3)
     {
         return ipmi::responseInvalidFieldRequest();
     }
@@ -402,6 +648,61 @@ ipmi::RspType<> setPowerLimit(ipmi::Context::ptr& ctx, uint16_t reserved1,
         return ipmi::responseUnspecifiedError();
     }
 
+    /*
+     * As defined in table 6-18 of DCMI specification version 1.5.
+     * The Exception action value is mapped as below
+     *  00h - No Action
+     *  01h - Hard Power Off system and log events to SEL
+     *  02h - 10h OEM defined actions
+     *  11h - Log event to SEL only
+     *  12h-FFh Reserved
+     */
+    if (exceptionAction >= 0x12)
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
+    std::string exceptActStr;
+
+    switch (static_cast<dcmi::ExceptActOptions>(exceptionAction))
+    {
+        case dcmi::ExceptActOptions::NoAction:
+        {
+            exceptActStr = dcmi::DbusExceptAct::noAction;
+            break;
+        }
+        case dcmi::ExceptActOptions::HardPowerOff:
+        {
+            exceptActStr = dcmi::DbusExceptAct::hardPowerOff;
+            break;
+        }
+        case dcmi::ExceptActOptions::LogEventOnly:
+        {
+            exceptActStr = dcmi::DbusExceptAct::logEventOnly;
+            break;
+        }
+        default:
+        {
+            exceptActStr = dcmi::DbusExceptAct::oem;
+            break;
+        }
+    }
+
+    if (!dcmi::setPcapExceptAction(ctx, exceptActStr))
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
+    if (!dcmi::setPcapCorrectTime(ctx, correctionTime))
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
+    if (!dcmi::setPcapSamplPeriod(ctx, statsPeriod))
+    {
+        return ipmi::responseUnspecifiedError();
+    }
+
     log<level::INFO>("Set Power Cap", entry("POWERCAP=%u", powerLimit));
 
     return ipmi::responseSuccess();
-- 
2.25.1

