From 2f6447e1659a76b81802a166c775b14af5b87efe Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Tue, 16 Aug 2022 10:43:19 +0700
Subject: [PATCH] replace static converting with rounding

Issue: When the users request to get the sensor thresholds via "ipmitool
sensor get <sensor_name>" command, sometimes the value is not correct.
E.g: The real sensor threshold is 2.01, the "scale" = 0, "exponentR" = -3,
"coefficientM" = 10. After calculating, the expect return value is 201, but
the actual result is 200 (ipmitool displays the value of threshold is 2.00).

Root cause: The "float point" can not present exactly the "double"
value in some cases. Therefore, after calculating, the value of sensor
thresholds is incorrect when convert from double to uint8_t.

Solution: Replace static converting with rounding.

Tested:
     1. Check the result of the threshold whose value is 2.01
        ipmitool sensor get <2.01_Sensor_name>
     2. The threshold value is 2.01

Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 sensorhandler.cpp | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/sensorhandler.cpp b/sensorhandler.cpp
index f0c22fe..e0d9826 100644
--- a/sensorhandler.cpp
+++ b/sensorhandler.cpp
@@ -705,8 +705,8 @@ get_sdr::GetSensorThresholdsResponse
     if (std::isfinite(warnLow))
     {
         warnLow *= std::pow(10, info.scale - info.exponentR);
-        resp.lowerNonCritical = static_cast<uint8_t>(
-            (warnLow - info.scaledOffset) / info.coefficientM);
+        resp.lowerNonCritical = static_cast<uint8_t>(round(
+            (warnLow - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::NON_CRITICAL_LOW_MASK);
     }
@@ -714,8 +714,8 @@ get_sdr::GetSensorThresholdsResponse
     if (std::isfinite(warnHigh))
     {
         warnHigh *= std::pow(10, info.scale - info.exponentR);
-        resp.upperNonCritical = static_cast<uint8_t>(
-            (warnHigh - info.scaledOffset) / info.coefficientM);
+        resp.upperNonCritical = static_cast<uint8_t>(round(
+            (warnHigh - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::NON_CRITICAL_HIGH_MASK);
     }
@@ -739,8 +739,8 @@ get_sdr::GetSensorThresholdsResponse
     if (std::isfinite(critLow))
     {
         critLow *= std::pow(10, info.scale - info.exponentR);
-        resp.lowerCritical = static_cast<uint8_t>(
-            (critLow - info.scaledOffset) / info.coefficientM);
+        resp.lowerCritical = static_cast<uint8_t>(round(
+            (critLow - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::CRITICAL_LOW_MASK);
     }
@@ -748,8 +748,8 @@ get_sdr::GetSensorThresholdsResponse
     if (std::isfinite(critHigh))
     {
         critHigh *= std::pow(10, info.scale - info.exponentR);
-        resp.upperCritical = static_cast<uint8_t>(
-            (critHigh - info.scaledOffset) / info.coefficientM);
+        resp.upperCritical = static_cast<uint8_t>(round(
+            (critHigh - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::CRITICAL_HIGH_MASK);
     }
@@ -791,8 +791,8 @@ get_sdr::GetSensorThresholdsResponse getSensorSdr(uint8_t sensorNum)
     if (std::isfinite(warnLow))
     {
         warnLow *= std::pow(10, info.scale - info.exponentR);
-        resp.lowerNonCritical = static_cast<uint8_t>(
-            (warnLow - info.scaledOffset) / info.coefficientM);
+        resp.lowerNonCritical = static_cast<uint8_t>(round(
+            (warnLow - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::NON_CRITICAL_LOW_MASK);
     }
@@ -800,8 +800,8 @@ get_sdr::GetSensorThresholdsResponse getSensorSdr(uint8_t sensorNum)
     if (std::isfinite(warnHigh))
     {
         warnHigh *= std::pow(10, info.scale - info.exponentR);
-        resp.upperNonCritical = static_cast<uint8_t>(
-            (warnHigh - info.scaledOffset) / info.coefficientM);
+        resp.upperNonCritical = static_cast<uint8_t>(round(
+            (warnHigh - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::NON_CRITICAL_HIGH_MASK);
     }
@@ -826,8 +826,8 @@ get_sdr::GetSensorThresholdsResponse getSensorSdr(uint8_t sensorNum)
     if (std::isfinite(critLow))
     {
         critLow *= std::pow(10, info.scale - info.exponentR);
-        resp.lowerCritical = static_cast<uint8_t>(
-            (critLow - info.scaledOffset) / info.coefficientM);
+        resp.lowerCritical = static_cast<uint8_t>(round(
+            (critLow - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::CRITICAL_LOW_MASK);
     }
@@ -835,8 +835,8 @@ get_sdr::GetSensorThresholdsResponse getSensorSdr(uint8_t sensorNum)
     if (std::isfinite(critHigh))
     {
         critHigh *= std::pow(10, info.scale - info.exponentR);
-        resp.upperCritical = static_cast<uint8_t>(
-            (critHigh - info.scaledOffset) / info.coefficientM);
+        resp.upperCritical = static_cast<uint8_t>(round(
+            (critHigh - info.scaledOffset) / info.coefficientM));
         resp.validMask |= static_cast<uint8_t>(
             ipmi::sensor::ThresholdMask::CRITICAL_HIGH_MASK);
     }
-- 
2.30.0

