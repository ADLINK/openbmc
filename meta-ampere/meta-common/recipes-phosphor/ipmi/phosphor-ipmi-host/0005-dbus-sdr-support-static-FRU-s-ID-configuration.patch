From dada896374a3b719853084ddd544d0293b87ea78 Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Mon, 27 Jun 2022 14:08:29 +0700
Subject: [PATCH 5/5] dbus-sdr: support static FRU's ID configuration

Currently, dynamic sensor library generate FRU's ID via hashing
function, it makes the ID of FRU device can be changed is users replace
devices.
This commit add option to configure FRU's ID via BUS and ADDRESS of FRU
devices. User can enable dynamic-sensors-static-fru to configure static
FRU's ID in the fru_id.json file.
The format of fru_id.json as below:
[
  {
    "id" : 0,
    "busIdx" : 4,
    "addrIdx" : 80
  },
  {
    "id" : 1,
    "busIdx" : 14,
    "addrIdx" : 80
  }
]

Tested:
      1. Create fru_id.json file to indicate ID of FRU devices.
      2. Build and flash image to platform.
      3. Check the FRUs information via ipmitool.
         ipmitool fru print <fruId in fru_id.json>
      4. Information of FRU devices are displayed

Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 dbus-sdr/storagecommands.cpp | 89 ++++++++++++++++++++++++++++++++++++
 meson.build                  |  1 +
 meson_options.txt            |  1 +
 3 files changed, 91 insertions(+)

diff --git a/dbus-sdr/storagecommands.cpp b/dbus-sdr/storagecommands.cpp
index 82f691c..419886d 100644
--- a/dbus-sdr/storagecommands.cpp
+++ b/dbus-sdr/storagecommands.cpp
@@ -35,6 +35,11 @@
 #include <stdexcept>
 #include <string_view>
 
+#ifdef FEATURE_DYNAMIC_STATIC_FRU_ID
+
+#include <nlohmann/json.hpp>
+
+#endif
 static constexpr bool DEBUG = false;
 
 namespace dynamic_sensors::ipmi::sel
@@ -167,13 +172,86 @@ void createTimers()
     writeTimer = std::make_unique<phosphor::Timer>(writeFruCache);
 }
 
+#ifdef FEATURE_DYNAMIC_STATIC_FRU_ID
+std::optional<boost::container::flat_map<std::pair<uint8_t, uint8_t>, uint8_t>>
+    parseStaticFruConfig(const nlohmann::json& data)
+{
+    boost::container::flat_map<std::pair<uint8_t, uint8_t>, uint8_t> fruIdTbl;
+    if (data.is_array())
+    {
+        try
+        {
+            for (const auto& entity : data)
+            {
+                uint8_t busIdx = entity.at("busIdx").get<uint8_t>();
+                uint8_t addrIdx = entity.at("addrIdx").get<uint8_t>();
+                uint8_t fruId = entity.at("id").get<uint8_t>();
+                std::pair<uint8_t, uint8_t> fruDev(busIdx, addrIdx);
+                if (fruIdTbl.find(fruDev) != fruIdTbl.end())
+                {
+                    phosphor::logging::log<phosphor::logging::level::ERR>(
+                        "the pair of bus and address has been duplicated");
+                    continue;
+                }
+                fruIdTbl.emplace(fruDev, fruId);
+            }
+        }
+        catch (const std::exception& e)
+        {
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "error happend during parsing fru configuration");
+            return std::nullopt;
+        }
+    }
+    return fruIdTbl;
+}
+#endif
+
 void recalculateHashes()
 {
 
     deviceHashes.clear();
+#ifdef FEATURE_DYNAMIC_STATIC_FRU_ID
+
+    boost::container::flat_map<std::pair<uint8_t, uint8_t>, uint8_t> fruIdTbl;
+    const char* staticIdCfgFileName = "/usr/share/ipmi-providers/fru_id.json";
+    std::ifstream fruCfgFile(staticIdCfgFileName);
+
+    /*
+     * Parse FRU configuration information
+     */
+    if (!fruCfgFile.is_open())
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "error reading fru configuration");
+        return;
+    }
+    else
+    {
+        auto data = nlohmann::json::parse(fruCfgFile, nullptr, false);
+
+        if (data.is_discarded())
+        {
+            /* pasrsing FRU configuration data */
+            phosphor::logging::log<phosphor::logging::level::ERR>(
+                "error parsing fru configuration");
+            return;
+        }
+        else
+        {
+            auto parsingData = parseStaticFruConfig(data);
+            if (!parsingData)
+            {
+                return;
+            }
+            fruIdTbl = std::move(*parsingData);
+        }
+    }
+#else
     // hash the object paths to create unique device id's. increment on
     // collision
     std::hash<std::string> hasher;
+#endif
     for (const auto& fru : frus)
     {
         auto fruIface = fru.second.find("xyz.openbmc_project.FruDevice");
@@ -195,6 +273,16 @@ void recalculateHashes()
 
         uint8_t fruBus = std::get<uint32_t>(busFind->second);
         uint8_t fruAddr = std::get<uint32_t>(addrFind->second);
+
+#ifdef FEATURE_DYNAMIC_STATIC_FRU_ID
+        /* Set static ID for fru devices that have been configured */
+        std::pair<uint8_t, uint8_t> fruDev(fruBus, fruAddr);
+        if (fruIdTbl.find(fruDev) != fruIdTbl.end())
+        {
+            deviceHashes.emplace(fruIdTbl[fruDev], fruDev);
+        }
+#else
+
         auto chassisFind = fruIface->second.find("CHASSIS_TYPE");
         std::string chassisType;
         if (chassisFind != fruIface->second.end())
@@ -231,6 +319,7 @@ void recalculateHashes()
                 }
             }
         }
+#endif
     }
 }
 
diff --git a/meson.build b/meson.build
index 0fbadc3..ed350fb 100644
--- a/meson.build
+++ b/meson.build
@@ -61,6 +61,7 @@ feature_map = {
   'hybrid-sensors'             : '-DFEATURE_HYBRID_SENSORS',
   'sensors-cache'              : '-DFEATURE_SENSORS_CACHE',
   'sel-logger-clears-sel'      : '-DFEATURE_SEL_LOGGER_CLEARS_SEL',
+  'dynamic-sensors-static-fru' : '-DFEATURE_DYNAMIC_STATIC_FRU_ID',
 }
 
 foreach option_key, option_value : feature_map
diff --git a/meson_options.txt b/meson_options.txt
index af121c6..25c7e10 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -53,6 +53,7 @@ option('whitelist-conf', type: 'string', value: 'host-ipmid-whitelist.conf', des
 option('dynamic-sensors', type: 'feature', value: 'disabled', description: 'Dynamic sensors stack is enabled by default; offer a way to disable it')
 option('dynamic-sensors-write', type: 'feature', value: 'disabled', description: 'Dynamic sensors stack is enabled by default; offer a way to disable it')
 option('hybrid-sensors', type: 'feature', value: 'disabled', description: 'Hybrid sensors stack is disabled by default; offer a way to enable it')
+option('dynamic-sensors-static-fru', type: 'feature', value: 'disabled', description: 'Dynamic sensors static FRU id feature is disabled by default; offer a way to enable it')
 
 # Sensor Cache
 option('sensors-cache', type: 'feature', value: 'disabled', description: 'Sensor cache stack is disabled by default; offer a way to enable it')
-- 
2.25.1

