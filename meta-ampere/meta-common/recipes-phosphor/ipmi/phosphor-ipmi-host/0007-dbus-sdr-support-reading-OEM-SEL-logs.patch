From b091cfa22554ea8835793faaf8177cdabecfbb36 Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Mon, 7 Aug 2023 09:44:42 +0700
Subject: [PATCH] dbus-sdr: support reading OEM SEL logs

This commit supports reading OEM SEL record type in range 0xC0-0xDF and
0xE0-0xFF.

Tested:
  Request to show SEL logs, OEM SEL log is shown.

Change-Id: I662641353b69225e7dd4962153b487d8f7505ccd
Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 dbus-sdr/storagecommands.cpp | 41 ++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)

diff --git a/dbus-sdr/storagecommands.cpp b/dbus-sdr/storagecommands.cpp
index 86da130..b465981 100644
--- a/dbus-sdr/storagecommands.cpp
+++ b/dbus-sdr/storagecommands.cpp
@@ -1193,6 +1193,47 @@ ipmi::RspType<uint16_t,                   // Next Record ID
             systemEventType{timestamp, generatorID, evmRev, sensorType,
                             sensorNum, eventType, eventDir, eventData});
     }
+    else if (recordType >=
+				   dynamic_sensors::ipmi::sel::oemTsEventFirst &&
+			   recordType <=
+				   dynamic_sensors::ipmi::sel::oemTsEventLast) 
+    {
+			// Get the timestamp
+			std::tm timeStruct = {};
+			std::istringstream entryStream(entryTimestamp);
+
+			uint32_t timestamp = ipmi::sel::invalidTimeStamp;
+			if (entryStream >>
+			    std::get_time(&timeStruct, "%Y-%m-%dT%H:%M:%S")) {
+				timestamp = std::mktime(&timeStruct);
+			}
+
+			// Only keep the bytes that fit in the record
+			std::array<uint8_t,
+				   dynamic_sensors::ipmi::sel::oemTsEventSize>
+				eventData{};
+			std::copy_n(eventDataBytes.begin(),
+				    std::min(eventDataBytes.size(),
+					     eventData.size()),
+				    eventData.begin());
+
+			return ipmi::responseSuccess(
+				nextRecordID, recordID, recordType,
+				oemTsEventType{ timestamp, eventData });
+	} 
+    else if (recordType >= dynamic_sensors::ipmi::sel::oemEventFirst) 
+    {
+			// Only keep the bytes that fit in the record
+			std::array<uint8_t, dynamic_sensors::ipmi::sel::oemEventSize>
+				eventData{};
+			std::copy_n(eventDataBytes.begin(),
+				    std::min(eventDataBytes.size(),
+					     eventData.size()),
+				    eventData.begin());
+
+			return ipmi::responseSuccess(nextRecordID, recordID,
+						     recordType, eventData);
+	}
 
     return ipmi::responseUnspecifiedError();
 }
-- 
2.25.1

