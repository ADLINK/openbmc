From 5cc7a40b810cd856ffb46614e7b64a4270841319 Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Thu, 9 May 2024 10:07:11 +0700
Subject: [PATCH] dbus-sdr: support to get Entity Id/Instance of PLDM's sensors

The Entity ID/Instance of PLDM's sensors are not configured in the EM
files, they are parsed from PDR messages instead. Those information are
stored in the "Inventory.Source.PLDM.Entity" interface, this commit
supports parsing EntityType/EntityInstanceNumber of this interface to
calculate Entity Id/Instance.

Tested:
    1. Check dcmi sensors
       $ipmitool dcmi sensors
    2. The list of PLDM's temperature sensors that have EntityId
       is 135 (processor) are shown.

Change-Id: Ibb54a88e1dc88d3152b7faec3c940bb214c2b9c7
Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 dbus-sdr/sdrutils.cpp | 129 +++++++++++++++++++++++++++++++++++-------
 1 file changed, 110 insertions(+), 19 deletions(-)

diff --git a/dbus-sdr/sdrutils.cpp b/dbus-sdr/sdrutils.cpp
index e7ed347..df86f14 100644
--- a/dbus-sdr/sdrutils.cpp
+++ b/dbus-sdr/sdrutils.cpp
@@ -21,6 +21,7 @@
 #include <fstream>
 #include <optional>
 #include <unordered_set>
+#include <unordered_map>
 
 #ifdef FEATURE_HYBRID_SENSORS
 
@@ -405,6 +406,32 @@ std::map<std::string, Value> getEntityManagerProperties(const char* path,
     return properties;
 }
 
+std::map<std::string, Value> getPLDMProperties(const char* path, const char* interface)
+{
+    std::map<std::string, Value> properties;
+    std::shared_ptr<sdbusplus::asio::connection> dbus = getSdBus();
+    sdbusplus::message_t getProperties =
+        dbus->new_method_call("xyz.openbmc_project.PLDM", path,
+                              "org.freedesktop.DBus.Properties", "GetAll");
+
+    getProperties.append(interface);
+
+    try
+    {
+        sdbusplus::message_t response = dbus->call(getProperties);
+        response.read(properties);
+    }
+    catch (const std::exception& e)
+    {
+        phosphor::logging::log<phosphor::logging::level::ERR>(
+            "Failed to GetAll", phosphor::logging::entry("PATH=%s", path),
+            phosphor::logging::entry("INTF=%s", interface),
+            phosphor::logging::entry("WHAT=%s", e.what()));
+    }
+
+    return properties;
+}
+
 // Fetch the ipmiDecoratorPaths to get the list of dbus objects that
 // have ipmi decorator to prevent unnessary dbus call to fetch the info
 std::optional<std::unordered_set<std::string>>&
@@ -584,29 +611,93 @@ void updateIpmiFromAssociation(
         // If there are multi association path settings and only one path exist,
         // we need to continue if cannot find configuration interface for this
         // sensor.
-        if (!configurationInterface)
+        if (configurationInterface)
         {
-            continue;
-        }
-
-        // We found a configuration interface.
-        std::map<std::string, Value> configurationProperties =
-            getEntityManagerProperties(sensorConfigPath.c_str(),
-                                       configurationInterface->c_str());
-
-        entityIdProp = configurationProperties.find("EntityId");
-        entityInstanceProp = configurationProperties.find("EntityInstance");
-        if (entityIdProp != configurationProperties.end())
-        {
-            entityId =
-                static_cast<uint8_t>(std::get<uint64_t>(entityIdProp->second));
+            // We found a configuration interface.
+            std::map<std::string, Value> configurationProperties =
+                getEntityManagerProperties(sensorConfigPath.c_str(),
+                                        configurationInterface->c_str());
+
+            entityIdProp = configurationProperties.find("EntityId");
+            entityInstanceProp = configurationProperties.find("EntityInstance");
+            if (entityIdProp != configurationProperties.end())
+            {
+                entityId =
+                    static_cast<uint8_t>(std::get<uint64_t>(entityIdProp->second));
+            }
+            if (entityInstanceProp != configurationProperties.end())
+            {
+                entityInstance = static_cast<uint8_t>(
+                    std::get<uint64_t>(entityInstanceProp->second));
+            }
         }
-        if (entityInstanceProp != configurationProperties.end())
+        else if (sensorInterfacesResponseOpt.value().find("xyz.openbmc_project.PLDM")
+                 != sensorInterfacesResponseOpt.value().end())
         {
-            entityInstance = static_cast<uint8_t>(
-                std::get<uint64_t>(entityInstanceProp->second));
-        }
+            /*
+            * Try to get the Entity Id and Entity Instance of sensors that
+            * belong to PLDM.
+            */
+
+            /*
+            * The mapping between pldm Entity Id and IPMI Entity Id.
+            * Refer to the Table 15 of https://www.dmtf.org/sites/default/files/standards/documents/DSP0249_1.1.0.pdf
+            * for more information.
+            */
+            static const std::unordered_map<uint16_t, uint8_t> entityIdCodeTbl = {
+                {0x00, 0x00}, {0x01, 0x01}, {0x03, 0x25}, {0x04, 0x26}, {0x05, 0x27},
+                {0x06, 0x2f}, {0x1e, 0x21}, {0x1f, 0x22}, {0x20, 0x23}, {0x24, 0x2e},
+                {0x2d, 0x17}, {0x2e, 0x18}, {0x2f, 0x1a}, {0x30, 0x1b}, {0x31, 0x1c},
+                {0x3f, 0x06}, {0x40, 0x07}, {0x41, 0x08}, {0x43, 0x09}, {0x44, 0x0b},
+                {0x45, 0x0c}, {0x46, 0x0d}, {0x47, 0x15}, {0x48, 0x0e}, {0x49, 0x0f},
+                {0x4a, 0x10}, {0x4b, 0x11}, {0x4c, 0x16}, {0x4d, 0x29}, {0x4e, 0x2a},
+                {0x4f, 0x2b}, {0x50, 0x2c}, {0x51, 0x2d}, {0x5c, 0x1e}, {0x79, 0x28},
+                {0x87, 0x03}, {0x93, 0x35}, {0xa1, 0x24}, {0xa5, 0x30}, {0xa6, 0x31},
+                {0xab, 0x32}, {0xac, 0x33}, {0xad, 0x34}, {0xbb, 0x1f}
+            };
+
+            /*
+            * The "Inventory.Source.PLDM.Entity" interface has EntityType,
+            * EntityInstanceNumber and ContainerID properties.
+            * 
+            * 1. The EntityType property includes 1 bit to show Physical or
+            * Logical entity and 15 bits to show the Entity Id.
+            * 2. EntityInstanceNumber show the Entity Instance.
+            * 
+            * Refer to the chapter 9 of https://www.dmtf.org/sites/default/files/standards/documents/DSP0248_1.2.2.pdf
+            * for more information.
+            */
+            auto pldmProperties = getPLDMProperties(sensorConfigPath.c_str(),
+                            "xyz.openbmc_project.Inventory.Source.PLDM.Entity");
+
+            entityIdProp = pldmProperties.find("EntityType");
+            entityInstanceProp = pldmProperties.find("EntityInstanceNumber");
+
+            if (entityIdProp != pldmProperties.end())
+            {
+                uint16_t entityIdPldm = std::get<uint16_t>(entityIdProp->second);
+                // remove the P/L bit in the EntityType value
+                entityIdPldm &= 0x7fff;
+
+                const auto& entityIdCodeIt = entityIdCodeTbl.find(entityIdPldm);
+
+                if (entityIdCodeIt != entityIdCodeTbl.end())
+                {
+                    entityId = entityIdCodeIt->second;
+                }
+                else
+                {
+                    // Unspecificed Entity Id
+                    entityId = 0x00;
+                }
+            }
 
+            if (entityInstanceProp != pldmProperties.end())
+            {
+                entityInstance = static_cast<uint8_t>(
+                std::get<uint16_t>(entityInstanceProp->second));
+            }
+        }
         // stop searching Association records.
         break;
     } // end for Association vectors.
-- 
2.25.1

