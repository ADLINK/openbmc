From 9bc2371cdfc6e84fa409849a667ab7fa7099282b Mon Sep 17 00:00:00 2001
From: Chau Ly <chaul@amperecomputing.com>
Date: Wed, 1 Feb 2023 06:06:47 +0000
Subject: [PATCH] Change method for NMI triggering

This patch changes to use method NMI from interface
"xyz.openbmc_project.Control.Host.NMI" of object path
"/xyz/openbmc_project/control/host0/nmi" to trigger NMI to
synchronize with Redfish.

Tested:
1. BMC is ON, host is ON
2. ipmitool chassis power diag
=> nmi service is called, NMI crash dump is generated in host.

Signed-off-by: Chau Ly <chaul@amperecomputing.com>

%% original patch: 0009-Change-method-for-NMI-triggering.patch
---
 chassishandler.cpp | 30 +++++++++++-------------------
 1 file changed, 11 insertions(+), 19 deletions(-)

diff --git a/chassishandler.cpp b/chassishandler.cpp
index 014e0ca..a1cc471 100644
--- a/chassishandler.cpp
+++ b/chassishandler.cpp
@@ -883,34 +883,26 @@ int initiateChassisStateTransition(ipmi::Context::ptr& ctx,
 }
 
 //------------------------------------------
-// Set Enabled property to inform NMI source
-// handling to trigger a NMI_OUT BSOD.
+// Call method to trigger NMI
 //------------------------------------------
-int setNmiProperty(ipmi::Context::ptr& ctx, const bool value)
+int callNmiMethod(ipmi::Context::ptr& ctx)
 {
-    constexpr const char* nmiSourceObjPath =
-        "/xyz/openbmc_project/Chassis/Control/NMISource";
-    constexpr const char* nmiSourceIntf =
-        "xyz.openbmc_project.Chassis.Control.NMISource";
-    std::string bmcSourceSignal = "xyz.openbmc_project.Chassis.Control."
-                                  "NMISource.BMCSourceSignal.ChassisCmd";
+    constexpr const char* nmiObjPath =
+        "/xyz/openbmc_project/control/host0/nmi";
+    constexpr const char* nmiIntf =
+        "xyz.openbmc_project.Control.Host.NMI";
 
     std::string service;
     boost::system::error_code ec =
-        ipmi::getService(ctx, nmiSourceIntf, nmiSourceObjPath, service);
+        ipmi::getService(ctx, nmiIntf, nmiObjPath, service);
     if (!ec)
     {
-        ec = ipmi::setDbusProperty(ctx, service, nmiSourceObjPath,
-                                   nmiSourceIntf, "BMCSource", bmcSourceSignal);
-    }
-    if (!ec)
-    {
-        ec = ipmi::setDbusProperty(ctx, service, nmiSourceObjPath,
-                                   nmiSourceIntf, "Enabled", value);
+        ctx->bus->yield_method_call(ctx->yield, ec, service, nmiObjPath,
+                                    nmiIntf, "NMI");
     }
     if (ec)
     {
-        log<level::ERR>("Failed to trigger NMI_OUT",
+        log<level::ERR>("Failed to trigger NMI",
                         entry("EXCEPTION=%s", ec.message().c_str()));
         return -1;
     }
@@ -1381,7 +1373,7 @@ ipmi::RspType<> ipmiChassisControl(ipmi::Context::ptr& ctx,
             rc = initiateHostStateTransition(ctx, State::Host::Transition::Off);
             break;
         case CMD_PULSE_DIAGNOSTIC_INTR:
-            rc = setNmiProperty(ctx, true);
+            rc = callNmiMethod(ctx);
             break;
 
         default:
-- 
2.25.1

