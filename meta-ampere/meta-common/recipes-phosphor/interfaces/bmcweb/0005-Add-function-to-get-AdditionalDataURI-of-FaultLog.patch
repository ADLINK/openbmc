From a4617b2db0ddf97d5a9d72889b768b9c033e3b7d Mon Sep 17 00:00:00 2001
From: Dung Cao <dung@os.amperecomputing.com>
Date: Tue, 1 Nov 2022 10:52:49 +0700
Subject: [PATCH 5/6] LogService: Add get AdditionalDataURI of FaultLog

Add function to download CPER logs information.

Example of fault log entry referencing CPER log:

{
  "@odata.id": "/redfish/v1/Managers/bmc/LogServices/FaultLog/Entries/1",
  "@odata.type": "#LogEntry.v1_8_0.LogEntry",
  "AdditionalDataURI": "/redfish/v1/Systems/system/LogServices/FaultLog/Entries/RAS_CPER_2022-10-05.09:09:21/attachment",
  "Created": "2022-10-05T09:09:21.382499+00:00",
  "DiagnosticDataType": "OEM",
  "EntryType": "Oem",
  "Id": "1",
  "Name": "FaultLog Dump Entry",
  "OEMDiagnosticDataType": "OpenBMC Fault Log",
  "OemRecordFormat": "CPER"
},

Can download the CPER log via AdditionalDataURI:
 curl -k -H "X-Auth-Token: $token" -X GET  \
    /redfish/v1/Systems/system/LogServices/FaultLog/Entries/RAS_CPER_2022-10-05.09:09:21/attachment \
    --output cper.dump

Signed-off-by: Dung Cao <dung@os.amperecomputing.com>
---
 redfish-core/include/redfish.hpp  |  2 +
 redfish-core/lib/log_services.hpp | 61 +++++++++++++++++++++++++++++--
 2 files changed, 59 insertions(+), 4 deletions(-)

diff --git a/redfish-core/include/redfish.hpp b/redfish-core/include/redfish.hpp
index be75f894..943c2f29 100644
--- a/redfish-core/include/redfish.hpp
+++ b/redfish-core/include/redfish.hpp
@@ -132,6 +132,8 @@ class RedfishService
         requestRoutesFaultLogDumpEntryCollection(app);
         requestRoutesFaultLogDumpEntry(app);
         requestRoutesFaultLogDumpClear(app);
+
+        requestRoutesFaultLogDownload(app);
 #endif
 
 #ifndef BMCWEB_ENABLE_REDFISH_DBUS_LOG_ENTRIES
diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index ebde81bf..0bca775f 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -573,8 +573,8 @@ inline void
                 if (entryType == "CPER")
                 {
                     thisEntry["AdditionalDataURI"] =
-                        "/redfish/v1/Systems/system/LogServices/" +
-                        primaryLogId;
+                        "/redfish/v1/Systems/system/LogServices/FaultLog/Entries/" +
+                        primaryLogId + "/attachment";
                     thisEntry["OemRecordFormat"] = "CPER";
                 }
                 else if (entryType == "Crashdump")
@@ -689,8 +689,8 @@ inline void
                 if (entryType == "CPER")
                 {
                     asyncResp->res.jsonValue["AdditionalDataURI"] =
-                        "/redfish/v1/Systems/system/LogServices/" +
-                        primaryLogId;
+                            "/redfish/v1/Systems/system/LogServices/FaultLog/Entries/" +
+                            primaryLogId + "/attachment";
                     asyncResp->res.jsonValue["OemRecordFormat"] = "CPER";
                 }
                 else if (entryType == "Crashdump")
@@ -4117,4 +4117,57 @@ inline void requestRoutesPostCodesEntry(App& app)
         });
 }
 
+inline void requestRoutesFaultLogDownload(App& app)
+{
+    // Note: Deviated from redfish privilege registry for GET & HEAD
+    // method for security reasons.
+    BMCWEB_ROUTE(
+        app,
+        "/redfish/v1/Systems/system/LogServices/FaultLog/Entries/<str>/attachment")
+        .privileges(redfish::privileges::getLogEntry)
+        .methods(boost::beast::http::verb::get)(
+            [&app](const crow::Request& req,
+               const std::shared_ptr<bmcweb::AsyncResp>& asyncResp,
+               const std::string& primaryLogId) {
+        if (!redfish::setUpRedfishRoute(app, req, asyncResp))
+        {
+            return;
+        }
+        std::string faultLogDir = "/run/bmcweb/redfish/v1/Systems/system/LogServices/";
+        std::string path = faultLogDir + primaryLogId;
+        FILE* fp = fopen(path.c_str(), "rb");
+        if (fp == NULL)
+        {
+            BMCWEB_LOG_ERROR << "The FaultLog Dir is not exist: " << path.c_str();
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        auto fd = fileno(fp);
+        long long int size = lseek(fd, 0, SEEK_END);
+        if (size == -1)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+
+        std::vector<char> data(static_cast<size_t>(size));
+        long long int rc = lseek(fd, 0, SEEK_SET);
+        if (rc == -1)
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        rc = read(fd, data.data(), data.size());
+        if ((rc == -1) || (rc != size))
+        {
+            messages::internalError(asyncResp->res);
+            return;
+        }
+        close(fd);
+        std::string output(data.data(), data.size());
+        asyncResp->res.body() = std::move(output);
+        });
+
+}
+
 } // namespace redfish
-- 
2.25.1

