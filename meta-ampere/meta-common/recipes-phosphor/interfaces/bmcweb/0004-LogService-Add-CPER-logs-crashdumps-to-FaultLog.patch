From bfcc91be4941194c960a4a7b13b598f5a2ac0a64 Mon Sep 17 00:00:00 2001
From: Claire Weinan <cweinan@google.com>
Date: Wed, 3 Aug 2022 17:59:24 -0700
Subject: [PATCH] LogService: Add CPER logs & crashdumps to FaultLog

Background: The fault log manager (in the phosphor-debug-collector
module) now receives D-Bus signals to be notified when new CPER logs
and Crashdumps are available in BMC. Signals for CPER logs come from
the bios-bmc-smm-error-logger daemon and signals for crashdumps come
from Intel's proprietary crashdump daemon.

Here we add the ability to parse CPER log and crashdump information
received from the fault log manager over D-Bus and output it in fault
log entries.

Example fault log entry referencing CPER log:
{
  "@odata.id": "/redfish/v1/Managers/bmc/LogServices/FaultLog/Entries/19",
  "@odata.type": "#LogEntry.v1_8_0.LogEntry",
  "AdditionalDataURI": "/redfish/v1/Systems/system/LogServices/1E5D8F94-2011-413A-B958-961797D78237/Entries/afe46336-4564-47d5-8df3-bac150122a9d",
  "Created": "2022-07-25T14:56:36.477+00:00",
  "DiagnosticDataType": "OEM",
  "EntryType": "Oem",
  "Id": "19",
  "Name": "FaultLog Dump Entry",
  "OEMDiagnosticDataType": "OpenBMC Fault Log",
  "OemRecordFormat": "CPER"
}

Example fault log entry referencing crashdump:
{
  "@odata.id": "/redfish/v1/Managers/bmc/LogServices/FaultLog/Entries/21",
  "@odata.type": "#LogEntry.v1_8_0.LogEntry",
  "AdditionalDataURI": "/redfish/v1/Systems/system/LogServices/Crashdump/Entries/0",
  "Created": "2022-07-25T14:59:24.113+00:00",
  "DiagnosticDataType": "OEM",
  "EntryType": "Oem",
  "Id": "21",
  "Name": "FaultLog Dump Entry",
  "OEMDiagnosticDataType": "OpenBMC Fault Log",
  "OemRecordFormat": "Crashdump"
}

Tested:

Get dump entries individually and as a collection.
  Example commands:
  curl -k -H "X-Auth-Token: $token" -X GET http://${bmc}/redfish/v1/Managers/bmc/LogServices/FaultLog/Entries

  curl -k -H "X-Auth-Token: $token" -X GET
  http://${bmc}/redfish/v1/Managers/bmc/LogServices/FaultLog/Entries/1

Redfish Service Validator succeeded on the following URI tree:
/redfish/v1/Managers/bmc/LogServices/FaultLog

Signed-off-by: Claire Weinan <cweinan@google.com>
Change-Id: I79c5e220f9c22312817a634d2e4e998dc02deced
---
 redfish-core/lib/log_services.hpp | 105 +++++++++++++++++++++++++++++-
 1 file changed, 103 insertions(+), 2 deletions(-)

diff --git a/redfish-core/lib/log_services.hpp b/redfish-core/lib/log_services.hpp
index 92954861..a81034b8 100644
--- a/redfish-core/lib/log_services.hpp
+++ b/redfish-core/lib/log_services.hpp
@@ -341,6 +341,7 @@ static bool
 inline void parseDumpEntryFromDbusObject(
     const dbus::utility::ManagedObjectType::value_type& object,
     std::string& dumpStatus, uint64_t& size, uint64_t& timestampUs,
+    std::string& entryType, std::string& primaryLogId,
     const std::shared_ptr<bmcweb::AsyncResp>& asyncResp)
 {
     for (const auto& interfaceMap : object.second)
@@ -398,6 +399,45 @@ inline void parseDumpEntryFromDbusObject(
                 }
             }
         }
+        else if (interfaceMap.first ==
+                 "xyz.openbmc_project.Dump.Entry.FaultLog")
+        {
+            for (const auto& propertyMap : interfaceMap.second)
+            {
+                if (propertyMap.first == "Type")
+                {
+                    const std::string* entryTypePtr =
+                        std::get_if<std::string>(&propertyMap.second);
+                    if (entryTypePtr == nullptr)
+                    {
+                        messages::internalError(asyncResp->res);
+                        break;
+                    }
+                    if (*entryTypePtr ==
+                        "xyz.openbmc_project.Dump.Entry.FaultLog.FaultDataType.Crashdump")
+                    {
+                        entryType = "Crashdump";
+                    }
+                    else if (
+                        *entryTypePtr ==
+                        "xyz.openbmc_project.Dump.Entry.FaultLog.FaultDataType.CPER")
+                    {
+                        entryType = "CPER";
+                    }
+                }
+                else if (propertyMap.first == "PrimaryLogId")
+                {
+                    const std::string* primaryLogIdPtr =
+                        std::get_if<std::string>(&propertyMap.second);
+                    if (primaryLogIdPtr == nullptr)
+                    {
+                        messages::internalError(asyncResp->res);
+                        break;
+                    }
+                    primaryLogId = *primaryLogIdPtr;
+                }
+            }
+        }
     }
 }
 
@@ -483,6 +523,8 @@ inline void
             uint64_t timestampUs = 0;
             uint64_t size = 0;
             std::string dumpStatus;
+            std::string primaryLogId;
+            std::string entryType;
             nlohmann::json::object_t thisEntry;
 
             std::string entryID = object.first.filename();
@@ -492,7 +534,7 @@ inline void
             }
 
             parseDumpEntryFromDbusObject(object, dumpStatus, size, timestampUs,
-                                         asyncResp);
+                                         entryType, primaryLogId, asyncResp);
 
             if (dumpStatus !=
                     "xyz.openbmc_project.Common.Progress.OperationStatus.Completed" &&
@@ -512,13 +554,41 @@ inline void
 
             if (dumpType == "BMC")
             {
+                thisEntry["Created"] =
+                    redfish::time_utils::getDateTimeUint(timestampUs / 1000 / 1000);
+
                 thisEntry["DiagnosticDataType"] = "Manager";
                 thisEntry["AdditionalDataURI"] =
                     entriesPath + entryID + "/attachment";
                 thisEntry["AdditionalDataSizeBytes"] = size;
             }
+            else if (dumpType == "FaultLog")
+            {
+                thisEntry["Created"] =
+                    redfish::time_utils::getDateTimeUintMs(timestampUs / 1000);
+                thisEntry["DiagnosticDataType"] = "OEM";
+                thisEntry["OEMDiagnosticDataType"] = "OpenBMC Fault Log";
+                thisEntry["EntryType"] = "Oem";
+
+                if (entryType == "CPER")
+                {
+                    thisEntry["AdditionalDataURI"] =
+                        "/redfish/v1/Systems/system/LogServices/" +
+                        primaryLogId;
+                    thisEntry["OemRecordFormat"] = "CPER";
+                }
+                else if (entryType == "Crashdump")
+                {
+                    thisEntry["AdditionalDataURI"] =
+                        "/redfish/v1/Systems/system/LogServices/Crashdump/Entries/" +
+                        primaryLogId;
+                    thisEntry["OemRecordFormat"] = "Crashdump";
+                }
+            }
             else if (dumpType == "System")
             {
+                thisEntry["Created"] =
+                    redfish::time_utils::getDateTimeUint(timestampUs / 1000 / 1000);
                 thisEntry["DiagnosticDataType"] = "OEM";
                 thisEntry["OEMDiagnosticDataType"] = "System";
                 thisEntry["AdditionalDataURI"] =
@@ -571,9 +641,12 @@ inline void
             uint64_t timestampUs = 0;
             uint64_t size = 0;
             std::string dumpStatus;
+            std::string primaryLogId;
+            std::string entryType;
 
             parseDumpEntryFromDbusObject(objectPath, dumpStatus, size,
-                                         timestampUs, asyncResp);
+                                         timestampUs, entryType, primaryLogId,
+                                         asyncResp);
 
             if (dumpStatus !=
                     "xyz.openbmc_project.Common.Progress.OperationStatus.Completed" &&
@@ -597,13 +670,41 @@ inline void
 
             if (dumpType == "BMC")
             {
+                asyncResp->res.jsonValue["Created"] =
+                    redfish::time_utils::getDateTimeUint(timestampUs / 1000 / 1000);
                 asyncResp->res.jsonValue["DiagnosticDataType"] = "Manager";
                 asyncResp->res.jsonValue["AdditionalDataURI"] =
                     entriesPath + entryID + "/attachment";
                 asyncResp->res.jsonValue["AdditionalDataSizeBytes"] = size;
             }
+            else if (dumpType == "FaultLog")
+            {
+                asyncResp->res.jsonValue["Created"] =
+                    redfish::time_utils::getDateTimeUintMs(timestampUs / 1000);
+                asyncResp->res.jsonValue["DiagnosticDataType"] = "OEM";
+                asyncResp->res.jsonValue["OEMDiagnosticDataType"] =
+                    "OpenBMC Fault Log";
+                asyncResp->res.jsonValue["EntryType"] = "Oem";
+
+                if (entryType == "CPER")
+                {
+                    asyncResp->res.jsonValue["AdditionalDataURI"] =
+                        "/redfish/v1/Systems/system/LogServices/" +
+                        primaryLogId;
+                    asyncResp->res.jsonValue["OemRecordFormat"] = "CPER";
+                }
+                else if (entryType == "Crashdump")
+                {
+                    asyncResp->res.jsonValue["AdditionalDataURI"] =
+                        "/redfish/v1/Systems/system/LogServices/Crashdump/Entries/" +
+                        primaryLogId;
+                    asyncResp->res.jsonValue["OemRecordFormat"] = "Crashdump";
+                }
+            }
             else if (dumpType == "System")
             {
+                asyncResp->res.jsonValue["Created"] =
+                    redfish::time_utils::getDateTimeUint(timestampUs / 1000 / 1000);
                 asyncResp->res.jsonValue["DiagnosticDataType"] = "OEM";
                 asyncResp->res.jsonValue["OEMDiagnosticDataType"] = "System";
                 asyncResp->res.jsonValue["AdditionalDataURI"] =
-- 
2.25.1

