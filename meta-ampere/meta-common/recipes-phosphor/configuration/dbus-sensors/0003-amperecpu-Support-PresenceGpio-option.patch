From d0c92e3617f3728e0ac2ceb92e550bf8ccdea83a Mon Sep 17 00:00:00 2001
From: ThuBaNguyen <thu@os.amperecomputing.com>
Date: Wed, 28 Apr 2021 22:59:15 +0700
Subject: [PATCH 3/5] amperecpu: Support "PresenceGpio" option

ADCSensor daemon supports actiavate/deactivate the sensors which use
the CPU power domain. These behaviors is based on the installation
status of that CPU and "RequiredCPU" option in the sensors. ADCSensor
daemon uses Present property of the /system/chassis/motherboard/CPU_*
dbus interface to identify the CPU installation status. In Ampere
platforms, the ADC sensors with the prefix "S1_*" require the CPU2.
They should be hidden when CPU2 is absented.

In Ampere platforms, the GPIO interface is used to identify the CPU
installation status. In the CPU configuration, "PresenceGpio" option
will declare the GPIO pin and the logic of that pin which will be
applied when the CPU is installed.

This commit supports "PresenceGpio" in Ampere CPU daemon and update
the Present property of the /system/chassis/motherboard/CPU_* dbus
interface. This property is based on the status of the configured GPIO
pin.

Tested:
    1. Add PresenceGpio option in CPU2 configuration.
    2. The CPU_2 Present dbus property should be False when that CPU
       is not installed.
    3. The ADC sensors which require CPU2 should be hidden.

Signed-off-by: ThuBaNguyen <thu@os.amperecomputing.com>
Change-Id: I0fff02223003e84d15cac7bf519489aa2a6a226a
---
 include/AmpereCPU.hpp | 79 +++++++++++++++++++++++++++++++++++++++++++
 src/AmpereCPUMain.cpp | 25 ++++++++++++++
 2 files changed, 104 insertions(+)

diff --git a/include/AmpereCPU.hpp b/include/AmpereCPU.hpp
index c3ab5e3..c688dfe 100644
--- a/include/AmpereCPU.hpp
+++ b/include/AmpereCPU.hpp
@@ -2,6 +2,7 @@
 
 #include <Thresholds.hpp>
 #include <boost/asio/streambuf.hpp>
+#include <gpiod.hpp>
 #include <sdbusplus/asio/object_server.hpp>
 #include <sensor.hpp>
 
@@ -56,3 +57,81 @@ class AmpereCPUProperty
     double minReading;
     unsigned int sensorScaleFactor;
 };
+
+// this is added to socsensor.hpp to avoid having every sensor have to link
+// against libgpiod, if another sensor needs it we may move it to utils
+inline bool cpuIsPresent(const SensorData* sensorData)
+{
+    std::string gpioName = "";
+    bool activeHigh = true;
+    bool matchedPolarity = false;
+    bool matchedPresenceGpio = false;
+    static boost::container::flat_map<std::string, bool> cpuPresence;
+
+    for (const SensorBaseConfiguration& suppConfig : *sensorData)
+    {
+        if (suppConfig.first.find("PresenceGpio") == std::string::npos)
+        {
+            continue;
+        }
+        auto findName = suppConfig.second.find("Name");
+        if (findName != suppConfig.second.end())
+        {
+            matchedPresenceGpio = true;
+            gpioName = std::visit(VariantToStringVisitor(), findName->second);
+            auto findPolarity = suppConfig.second.find("Polarity");
+            if (findPolarity != suppConfig.second.end())
+            {
+                matchedPolarity = true;
+                if (std::string("Low") ==
+                    std::visit(VariantToStringVisitor(), findPolarity->second))
+                {
+                    activeHigh = false;
+                }
+            }
+        }
+        break;
+    }
+    /* Set CPU present to true for soc don't have PresenceGpio setting */
+    if (!matchedPresenceGpio)
+    {
+        return true;
+    }
+
+    /* Set CPU present to false when there is no Gpio name setting */
+    if (gpioName.empty())
+    {
+        std::cerr << "No PresenceGpio Name setting." << std::endl;
+        return false;
+    }
+
+    /* Set CPU present to false when there is no Polarity setting */
+    if (!matchedPolarity)
+    {
+        std::cerr << "No PresenceGpio Polarity setting." << std::endl;
+        return false;
+    }
+
+    auto line = gpiod::find_line(gpioName);
+    if (!line)
+    {
+        std::cerr << "Error requesting gpio: " << gpioName << "\n";
+        return false;
+    }
+
+    bool resp = false;
+    try
+    {
+        line.request({"socsensor", gpiod::line_request::DIRECTION_INPUT,
+                      activeHigh ? 0 : gpiod::line_request::FLAG_ACTIVE_LOW});
+        resp = line.get_value();
+    }
+    catch (std::system_error&)
+    {
+        std::cerr << "Error reading gpio: " << gpioName << "\n";
+        return false;
+    }
+    cpuPresence[gpioName] = resp;
+
+    return resp;
+}
\ No newline at end of file
diff --git a/src/AmpereCPUMain.cpp b/src/AmpereCPUMain.cpp
index 8704689..6edf8c1 100644
--- a/src/AmpereCPUMain.cpp
+++ b/src/AmpereCPUMain.cpp
@@ -47,6 +47,9 @@ static boost::container::flat_map<std::string, std::shared_ptr<AmpereCPUSensor>>
 static boost::container::flat_map<std::string, std::string> sensorTable;
 static boost::container::flat_map<std::string, AmpereCPUProperty> propMatch;
 static std::vector<AmpereCPUProperty> socProperties;
+boost::container::flat_map<std::string,
+                           std::shared_ptr<sdbusplus::asio::dbus_interface>>
+    inventoryIfaces;
 static std::regex i2cDevRegex(R"((\d+)-([a-fA-F0-9]+))");
 
 static bool createdSensors = false;
@@ -375,6 +378,24 @@ static bool matchSensor(
     return true;
 }
 
+bool addSoCInventory(sdbusplus::asio::object_server& objectServer,
+                     const std::string& name, bool present)
+{
+    std::string socName = std::regex_replace(name, illegalDbusRegex, "_");
+    if (inventoryIfaces.find(socName) == inventoryIfaces.end())
+    {
+        auto iface = objectServer.add_interface(
+            cpuInventoryPath + std::string("/") + socName,
+            "xyz.openbmc_project.Inventory.Item");
+        iface->register_property("PrettyName", socName);
+        iface->register_property("Present", present);
+        iface->initialize();
+        inventoryIfaces[socName] = std::move(iface);
+    }
+
+    return true;
+}
+
 static bool parseSensorConfig(
     boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
     std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
@@ -395,6 +416,10 @@ static bool parseSensorConfig(
         return false;
     }
 
+    addSoCInventory(objectServer,
+                    std::visit(VariantToStringVisitor(), findSOCName->second),
+                    cpuIsPresent(sensorData));
+
     if (!findFiles(directory, R"(\w\d+_input$)", sensorPaths, 0))
     {
         std::cerr << "No SOC non-label sensor in SOC\n";
-- 
2.25.1

