From d4b070eba02f4d1526607fa6d872811ee4b5b2de Mon Sep 17 00:00:00 2001
From: Thang Tran <thuutran@amperecomputing.com>
Date: Wed, 22 May 2024 09:09:35 +0700
Subject: [PATCH 6/7] ADC: Match `InterfaceAdded` signal

In the system which uses the GPIO to identify the installation status
of CPU. The `Present` property in the CPU object path of Inventory
service will be unchanged after it is added. In this case, there is
only one `InterfaceAdded` signal and there is no `PropertyChanged`
signal.

Support matching the `InterfaceAdded` signal to make sure the CPU
present state in ADC service will always be matched with `Present`
property of the CPU object path in the Inventory service.

Tested:
1. Use phosphor-gpio-presence to create CPU `present` D-Bus interface.
2. The ADC sensors should be added base on the `Present` properties
which are created by phosphor-gpio-presence.

Change-Id: Ic9e47283c684a402db1cb0c90b7d465921fd0bea
Signed-off-by: Thang Tran <thuutran@amperecomputing.com>
---
 src/ADCSensorMain.cpp | 136 +++++++++++++++++++++++++++++++++++++++++-
 src/Utils.hpp         |   1 +
 2 files changed, 134 insertions(+), 3 deletions(-)

diff --git a/src/ADCSensorMain.cpp b/src/ADCSensorMain.cpp
index 7e9c36a..73a4329 100644
--- a/src/ADCSensorMain.cpp
+++ b/src/ADCSensorMain.cpp
@@ -83,6 +83,73 @@ bool isAdc(const fs::path& parentPath)
     return deviceName.find("iio-hwmon") == 0;
 }
 
+static void
+    getPresentCpus(std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    static const int depth = 2;
+    static const int numKeys = 1;
+    GetSubTreeType cpuSubTree;
+
+    try
+    {
+        auto getItems = dbusConnection->new_method_call(
+            mapper::busName, mapper::path, mapper::interface, mapper::subtree);
+        getItems.append(cpuInventoryPath, static_cast<int32_t>(depth),
+                        std::array<const char*, numKeys>{
+                            "xyz.openbmc_project.Inventory.Item"});
+        auto getItemsResp = dbusConnection->call(getItems);
+        getItemsResp.read(cpuSubTree);
+    }
+    catch (sdbusplus::exception_t& e)
+    {
+        std::cerr << "error getting inventory item subtree: " << e.what()
+                  << "\n";
+        return;
+    }
+
+    for (const auto& [path, objDict] : cpuSubTree)
+    {
+        auto obj = sdbusplus::message::object_path(path).filename();
+        boost::to_lower(obj);
+        if (!obj.starts_with("cpu") || objDict.empty())
+        {
+            continue;
+        }
+        const std::string& owner = objDict.begin()->first;
+
+        std::variant<bool> respValue;
+        try
+        {
+            auto getPresence = dbusConnection->new_method_call(
+                owner.c_str(), path.c_str(), "org.freedesktop.DBus.Properties",
+                "Get");
+            getPresence.append("xyz.openbmc_project.Inventory.Item", "Present");
+            auto resp = dbusConnection->call(getPresence);
+            resp.read(respValue);
+        }
+        catch (sdbusplus::exception_t& e)
+        {
+            std::cerr << "Error in getting CPU presence: " << e.what() << "\n";
+            continue;
+        }
+        auto* present = std::get_if<bool>(&respValue);
+        if (present != nullptr && *present)
+        {
+            int cpuIndex = 0;
+            try
+            {
+                cpuIndex = std::stoi(obj.substr(obj.size() - 1));
+            }
+            catch (const std::exception& e)
+            {
+                std::cerr << "Error converting CPU index, " << e.what() << '\n';
+                continue;
+            }
+            cpuPresence[cpuIndex] = *present;
+        }
+    }
+}
+
 void createSensors(
     boost::asio::io_context& io, sdbusplus::asio::object_server& objectServer,
     boost::container::flat_map<std::string, std::shared_ptr<ADCSensor>>&
@@ -407,7 +474,64 @@ int main()
         std::string objectName;
         boost::container::flat_map<std::string, std::variant<bool>> values;
         message.read(objectName, values);
-        auto findPresence = values.find("Present");
+        const auto& findPresence = values.find("Present");
+
+        if (findPresence == values.end())
+        {
+            return;
+        }
+
+        cpuPresence[index] = std::get<bool>(findPresence->second);
+        // this implicitly cancels the timer
+        cpuFilterTimer.expires_after(std::chrono::seconds(1));
+
+        cpuFilterTimer.async_wait([&](const boost::system::error_code& ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                /* we were canceled*/
+                return;
+            }
+            if (ec)
+            {
+                std::cerr << "timer error\n";
+                return;
+            }
+            createSensors(io, objectServer, sensors, systemBus, nullptr,
+                          UpdateType::cpuPresenceChange);
+        });
+    };
+
+    std::function<void(sdbusplus::message_t&)> addCpuPresenceHandler =
+        [&](sdbusplus::message_t& message) {
+        sdbusplus::message::object_path cpuPath;
+        std::map<std::string, std::map<std::string, BasicVariantType>>
+            interfaces;
+        message.read(cpuPath, interfaces);
+        std::string cpuName = cpuPath.filename();
+        boost::to_lower(cpuName);
+
+        if (!cpuName.starts_with("cpu"))
+        {
+            return; // not interested
+        }
+        size_t index = 0;
+        try
+        {
+            index = std::stoi(cpuName.substr(cpuName.size() - 1));
+        }
+        catch (const std::invalid_argument&)
+        {
+            std::cerr << "Found invalid path " << cpuInventoryPath << "/"
+                      << cpuName << "\n";
+            return;
+        }
+
+        /* This message is sent by application that include Inventory.Item
+         * interface, therefore We don't have to check finding Inventory.Item
+         * interface is success or not */
+        const auto& values = interfaces[inventoryItemIntf];
+        const auto& findPresence = values.find("Present");
+
         if (findPresence != values.end())
         {
             cpuPresence[index] = std::get<bool>(findPresence->second);
@@ -437,9 +561,15 @@ int main()
     matches.emplace_back(std::make_unique<sdbusplus::bus::match_t>(
         static_cast<sdbusplus::bus_t&>(*systemBus),
         "type='signal',member='PropertiesChanged',path_namespace='" +
-            std::string(cpuInventoryPath) +
-            "',arg0namespace='xyz.openbmc_project.Inventory.Item'",
+            std::string(cpuInventoryPath) + "',arg0namespace='" +
+            std::string(inventoryItemIntf) + "'",
         cpuPresenceHandler));
+    matches.emplace_back(std::make_unique<sdbusplus::bus::match_t>(
+        static_cast<sdbusplus::bus_t&>(*systemBus),
+        sdbusplus::bus::match::rules::interfacesAdded(inventoryPath),
+        addCpuPresenceHandler));
+
+    getPresentCpus(systemBus);
 
     setupManufacturingModeMatch(*systemBus);
     io.run();
diff --git a/src/Utils.hpp b/src/Utils.hpp
index d76f954..962d628 100644
--- a/src/Utils.hpp
+++ b/src/Utils.hpp
@@ -28,6 +28,7 @@ const constexpr char* entityManagerName = "xyz.openbmc_project.EntityManager";
 
 constexpr const char* cpuInventoryPath =
     "/xyz/openbmc_project/inventory/system/chassis/motherboard";
+constexpr const char* inventoryItemIntf = "xyz.openbmc_project.Inventory.Item";
 const std::regex illegalDbusRegex("[^A-Za-z0-9_]");
 
 using BasicVariantType =
-- 
2.25.1

