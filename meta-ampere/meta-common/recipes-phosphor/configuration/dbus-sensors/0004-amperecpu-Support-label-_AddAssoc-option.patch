From 458cf0f0c66ad955104f74c5895a70e3099724dc Mon Sep 17 00:00:00 2001
From: ThuBaNguyen <thu@os.amperecomputing.com>
Date: Wed, 28 Jul 2021 17:18:54 +0700
Subject: [PATCH 4/5] amperecpu: Support "<label>_AddAssoc" option

Bydefault, Ampere CPU daemon will add all of the host sensors to
Association interface. BMC web will displayed these sensors in
sensor->health page. But some sensors are used as the source sensors
of the virtual sensors and should be hidden in Bmc Web.

This commit supports "<label>_AddAssoc" option in the sensor config.
The sensors with "<label>_AddAssoc":"false" will not be added to
Association interface. The sensor without this option or
"<label>_AddAssos":"true" will be added to the interface.

Tested:
    1. Add "<label>_AddAssoc":"false" in the sensors config.
    2. The sensor should be available in zyx.openbmc_project.CPUSensor
    3. The sensors with "<label>_AddAssoc":"false" should be hidden in
       BMC Web and Redfish.

Signed-off-by: ThuBaNguyen <thu@os.amperecomputing.com>
Change-Id: I6e674f29e804e0d2e15b669e8420bc4e772bdfaa
---
 include/AmpereCPU.hpp | 11 +++++++----
 include/sensor.hpp    |  7 +++++--
 src/AmpereCPU.cpp     | 16 +++++++++++-----
 src/AmpereCPUMain.cpp | 38 ++++++++++++++++++++++++++++++++------
 4 files changed, 55 insertions(+), 17 deletions(-)

diff --git a/include/AmpereCPU.hpp b/include/AmpereCPU.hpp
index c688dfe..df337f4 100644
--- a/include/AmpereCPU.hpp
+++ b/include/AmpereCPU.hpp
@@ -22,8 +22,9 @@ class AmpereCPUSensor :
                     std::vector<thresholds::Threshold>&& thresholds,
                     const std::string& sensorConfiguration,
                     std::string& sensorTypeName, unsigned int factor,
-                    double max, double min, const std::string& label,
-                    size_t tSize, PowerState readState);
+                    double max, double min, bool addAssociation,
+                    const std::string& label, size_t tSize,
+                    PowerState readState);
     ~AmpereCPUSensor() override;
     void setupRead(void);
 
@@ -46,9 +47,10 @@ class AmpereCPUProperty
 {
   public:
     AmpereCPUProperty(std::string name, double max, double min,
-                      unsigned int factor) :
+                      unsigned int factor, bool addAss) :
         labelTypeName(std::move(name)),
-        maxReading(max), minReading(min), sensorScaleFactor(factor)
+        maxReading(max), minReading(min), sensorScaleFactor(factor),
+        addAssociation(addAss)
     {}
     ~AmpereCPUProperty() = default;
 
@@ -56,6 +58,7 @@ class AmpereCPUProperty
     double maxReading;
     double minReading;
     unsigned int sensorScaleFactor;
+    bool addAssociation;
 };
 
 // this is added to socsensor.hpp to avoid having every sensor have to link
diff --git a/include/sensor.hpp b/include/sensor.hpp
index 2bc55f5..076b1df 100644
--- a/include/sensor.hpp
+++ b/include/sensor.hpp
@@ -249,14 +249,17 @@ struct Sensor
 
     void setInitialProperties(const std::string& unit,
                               const std::string& label = std::string(),
-                              size_t thresholdSize = 0)
+                              size_t thresholdSize = 0, bool createAssoc = true)
     {
         if (readState == PowerState::on || readState == PowerState::biosPost)
         {
             setupPowerMatch(dbusConnection);
         }
 
-        createAssociation(association, configurationPath);
+        if (createAssoc)
+        {
+            createAssociation(association, configurationPath);
+        }
 
         sensorInterface->register_property("Unit", unit);
         sensorInterface->register_property("MaxValue", maxValue);
diff --git a/src/AmpereCPU.cpp b/src/AmpereCPU.cpp
index f5b581e..adf853a 100644
--- a/src/AmpereCPU.cpp
+++ b/src/AmpereCPU.cpp
@@ -42,8 +42,8 @@ AmpereCPUSensor::AmpereCPUSensor(
     boost::asio::io_service& io, const std::string& sensorName,
     std::vector<thresholds::Threshold>&& thresholdsIn,
     const std::string& sensorConfiguration, std::string& sensorTypeName,
-    unsigned int factor, double max, double min, const std::string& label,
-    size_t tSize, PowerState readState) :
+    unsigned int factor, double max, double min, bool addAssociation,
+    const std::string& label, size_t tSize, PowerState readState) :
     Sensor(boost::replace_all_copy(sensorName, " ", "_"),
            std::move(thresholdsIn), sensorConfiguration, objectType, false,
            false, max, min, conn, readState),
@@ -78,10 +78,16 @@ AmpereCPUSensor::AmpereCPUSensor(
     }
     else
     {
-        setInitialProperties(sensorTypeName, label, tSize);
+        setInitialProperties(sensorTypeName, label, tSize, addAssociation);
     }
-    association = objectServer.add_interface(dbusPath, association::interface);
-    createInventoryAssoc(conn, association, configurationPath);
+    if (addAssociation)
+    {
+        association =
+            objectServer.add_interface(dbusPath, association::interface);
+        createInventoryAssoc(conn, association, configurationPath);
+    }
+
+    return;
 }
 
 AmpereCPUSensor::~AmpereCPUSensor()
diff --git a/src/AmpereCPUMain.cpp b/src/AmpereCPUMain.cpp
index 6edf8c1..59594fa 100644
--- a/src/AmpereCPUMain.cpp
+++ b/src/AmpereCPUMain.cpp
@@ -16,6 +16,7 @@
 
 #include <AmpereCPU.hpp>
 #include <Utils.hpp>
+#include <boost/algorithm/string/case_conv.hpp>
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/container/flat_map.hpp>
@@ -246,6 +247,7 @@ static bool matchSensor(
     std::string keyScale = labelHead + "_Scale";
     std::string keyMin = labelHead + "_Min";
     std::string keyMax = labelHead + "_Max";
+    std::string keyAddAssoc = labelHead + "_AddAssoc";
 
     auto findCustomName = baseConfig->second.find(keyName);
     if (findCustomName == baseConfig->second.end())
@@ -352,6 +354,28 @@ static bool matchSensor(
         return false;
     }
 
+    auto findCustomAssoc = baseConfig->second.find(keyAddAssoc);
+    if (findCustomAssoc != baseConfig->second.end())
+    {
+        try
+        {
+            std::string sAssociation =
+                std::visit(VariantToStringVisitor(), findCustomAssoc->second);
+            boost::to_lower(sAssociation);
+            socProperty->addAssociation =
+                sAssociation == "false" ? false : true;
+        }
+        catch (std::invalid_argument&)
+        {
+            std::cerr << "Unable to parse " << keyAddAssoc << "\n";
+            return false;
+        }
+    }
+    else
+    {
+        socProperty->addAssociation = true;
+    }
+
     std::vector<thresholds::Threshold> sensorThresholds;
     if (!parseThresholdsFromConfig(*sensorData, sensorThresholds, &labelHead))
     {
@@ -371,8 +395,9 @@ static bool matchSensor(
     sensors[sensorName] = std::make_shared<AmpereCPUSensor>(
         sensorPathStr, devType, objectServer, dbusConnection, io, sensorName,
         std::move(sensorThresholds), interfacePath, findSensorType->second,
-        factor, socProperty->maxReading, socProperty->minReading, labelHead,
-        sensorThresholds.size(), readState);
+        factor, socProperty->maxReading, socProperty->minReading,
+        socProperty->addAssociation, labelHead, sensorThresholds.size(),
+        readState);
     sensors[sensorName]->setupRead();
 
     return true;
@@ -572,10 +597,11 @@ void propertyInitialize(void)
                    {"temp", "temperature/"},
                    {"in", "voltage/"}};
 
-    propMatch = {{"power", AmpereCPUProperty("Power Property", 30000, 0, 1)},
-                 {"curr", AmpereCPUProperty("Curr property", 30000, 0, 1)},
-                 {"temp", AmpereCPUProperty("Temp property", 255, 0, 1)},
-                 {"in", AmpereCPUProperty("Voltage property", 30000, 0, 1)}};
+    propMatch = {
+        {"power", AmpereCPUProperty("Power Property", 30000, 0, 1, true)},
+        {"curr", AmpereCPUProperty("Curr property", 30000, 0, 1, true)},
+        {"temp", AmpereCPUProperty("Temp property", 255, 0, 1, true)},
+        {"in", AmpereCPUProperty("Voltage property", 30000, 0, 1, true)}};
 }
 
 int main()
-- 
2.25.1

