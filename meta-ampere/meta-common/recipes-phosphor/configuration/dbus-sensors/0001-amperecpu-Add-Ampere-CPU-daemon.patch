From 3f0aeebf575133a789904bb4903f01bd8dd4d10c Mon Sep 17 00:00:00 2001
From: ThuBaNguyen <thu@os.amperecomputing.com>
Date: Sat, 24 Apr 2021 21:40:05 +0700
Subject: [PATCH 1/5] amperecpu: Add Ampere CPU daemon

Ampere SoCs use the SCP register map interface to communicate with the
BMC firmware to report the host sensors, states, events and also the
errors. The current CPUSensors daemon is OEM daemon which was
reporting the Intel CPU sensors. This daemon used peci interface.
This requires new daemon to handle Ampere CPU sensors, events and
errors. In this first commit, AmpereCPU sources will handle the host
sensors, match the sensor paths in hwmon driver path with the sensors
configuration and create the sensors dbus objects.

Below is some info about Ampere CPU daemon:
    1. The daemon name is xyz.openbmc_project.amperecpusensor.service.
    2. The supports device type is "smpro_hwmon".
    3. The host sensors dbus objects will be add to
    xyz.openbmc_project.AmpereCPUSensor dbus interface.

Tested:
    1. Add Ampere CPU configuration in entity-manger with
    type="smpro_hwmon".
    2. Power on the host.
    3. Check the host sensors dbus objects in dbus interface
    xyz.openbmc_project.AmpereCPUSensor.

Signed-off-by: ThuBaNguyen <thu@os.amperecomputing.com>
Change-Id: If55d9bfad5bfc7022865365d7f718df259f118a9
---
 include/AmpereCPU.hpp                         |  58 ++
 meson_options.txt                             |   1 +
 service_files/meson.build                     |   1 +
 ...yz.openbmc_project.amperecpusensor.service |  13 +
 src/AmpereCPU.cpp                             | 180 ++++++
 src/AmpereCPUMain.cpp                         | 600 ++++++++++++++++++
 src/meson.build                               |  19 +
 7 files changed, 872 insertions(+)
 create mode 100644 include/AmpereCPU.hpp
 create mode 100644 service_files/xyz.openbmc_project.amperecpusensor.service
 create mode 100644 src/AmpereCPU.cpp
 create mode 100644 src/AmpereCPUMain.cpp

diff --git a/include/AmpereCPU.hpp b/include/AmpereCPU.hpp
new file mode 100644
index 0000000..c3ab5e3
--- /dev/null
+++ b/include/AmpereCPU.hpp
@@ -0,0 +1,58 @@
+#pragma once
+
+#include <Thresholds.hpp>
+#include <boost/asio/streambuf.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+#include <memory>
+#include <string>
+#include <utility>
+
+class AmpereCPUSensor :
+    public Sensor,
+    public std::enable_shared_from_this<AmpereCPUSensor>
+{
+  public:
+    AmpereCPUSensor(const std::string& path, const std::string& objectType,
+                    sdbusplus::asio::object_server& objectServer,
+                    std::shared_ptr<sdbusplus::asio::connection>& conn,
+                    boost::asio::io_service& io, const std::string& sensorName,
+                    std::vector<thresholds::Threshold>&& thresholds,
+                    const std::string& sensorConfiguration,
+                    std::string& sensorTypeName, unsigned int factor,
+                    double max, double min, const std::string& label,
+                    size_t tSize, PowerState readState);
+    ~AmpereCPUSensor() override;
+    void setupRead(void);
+
+  private:
+    sdbusplus::asio::object_server& objServer;
+    boost::asio::posix::stream_descriptor inputDev;
+    boost::asio::deadline_timer waitTimer;
+    std::shared_ptr<boost::asio::streambuf> readBuf;
+    std::string path;
+    unsigned int sensorFactor;
+    void handleResponse(const boost::system::error_code& err);
+    void checkThresholds(void) override;
+
+    int fd;
+    static constexpr unsigned int sensorPollMs = 1000;
+    static constexpr size_t warnAfterErrorCount = 10;
+};
+
+class AmpereCPUProperty
+{
+  public:
+    AmpereCPUProperty(std::string name, double max, double min,
+                      unsigned int factor) :
+        labelTypeName(std::move(name)),
+        maxReading(max), minReading(min), sensorScaleFactor(factor)
+    {}
+    ~AmpereCPUProperty() = default;
+
+    std::string labelTypeName;
+    double maxReading;
+    double minReading;
+    unsigned int sensorScaleFactor;
+};
diff --git a/meson_options.txt b/meson_options.txt
index d6a8b96..629e302 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -8,6 +8,7 @@ option('ipmb', type: 'feature', value: 'enabled', description: 'Enable IPMB sens
 option('mcu', type: 'feature', value: 'enabled', description: 'Enable MCU sensor.',)
 option('nvme', type: 'feature', value: 'enabled', description: 'Enable NVMe sensor.',)
 option('psu', type: 'feature', value: 'enabled', description: 'Enable PSU sensor.',)
+option('ampere-cpu', type: 'feature', value: 'enabled', description: 'Enable Ampere CPU sensor.',)
 option('external', type: 'feature', value: 'enabled', description: 'Enable External sensor.',)
 option('tests', type: 'feature', value: 'enabled', description: 'Build tests.',)
 option('validate-unsecure-feature', type : 'feature', value : 'disabled', description : 'Enables unsecure features required by validation. Note: mustbe turned off for production images.',)
diff --git a/service_files/meson.build b/service_files/meson.build
index 5f5b78c..8f8fbb2 100644
--- a/service_files/meson.build
+++ b/service_files/meson.build
@@ -9,6 +9,7 @@ unit_files = [
     ['mcu', 'xyz.openbmc_project.mcutempsensor.service'],
     ['nvme', 'xyz.openbmc_project.nvmesensor.service'],
     ['psu', 'xyz.openbmc_project.psusensor.service'],
+    ['ampere-cpu', 'xyz.openbmc_project.amperecpusensor.service'],
     ['external', 'xyz.openbmc_project.externalsensor.service'],
 ]
 
diff --git a/service_files/xyz.openbmc_project.amperecpusensor.service b/service_files/xyz.openbmc_project.amperecpusensor.service
new file mode 100644
index 0000000..aeaf70b
--- /dev/null
+++ b/service_files/xyz.openbmc_project.amperecpusensor.service
@@ -0,0 +1,13 @@
+[Unit]
+Description=Ampere CPU Sensors
+StopWhenUnneeded=false
+Requires=xyz.openbmc_project.EntityManager.service
+After=xyz.openbmc_project.EntityManager.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/amperecpusensor
+
+[Install]
+WantedBy=multi-user.target
diff --git a/src/AmpereCPU.cpp b/src/AmpereCPU.cpp
new file mode 100644
index 0000000..f5b581e
--- /dev/null
+++ b/src/AmpereCPU.cpp
@@ -0,0 +1,180 @@
+/*
+// Copyright 2021 Ampere Computing LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <unistd.h>
+
+#include <AmpereCPU.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/asio/read_until.hpp>
+#include <boost/date_time/posix_time/posix_time.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+
+#include <iostream>
+#include <istream>
+#include <limits>
+#include <memory>
+#include <string>
+#include <vector>
+
+static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
+static constexpr unsigned int sensorScaleFactor = 1000;
+static constexpr double roundFactor = 10000; // 3 decimal places
+
+AmpereCPUSensor::AmpereCPUSensor(
+    const std::string& path, const std::string& objectType,
+    sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& conn,
+    boost::asio::io_service& io, const std::string& sensorName,
+    std::vector<thresholds::Threshold>&& thresholdsIn,
+    const std::string& sensorConfiguration, std::string& sensorTypeName,
+    unsigned int factor, double max, double min, const std::string& label,
+    size_t tSize, PowerState readState) :
+    Sensor(boost::replace_all_copy(sensorName, " ", "_"),
+           std::move(thresholdsIn), sensorConfiguration, objectType, false,
+           false, max, min, conn, readState),
+    std::enable_shared_from_this<AmpereCPUSensor>(), objServer(objectServer),
+    inputDev(io), waitTimer(io), path(path), sensorFactor(factor)
+{
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg
+    fd = open(path.c_str(), O_RDONLY);
+    if (fd < 0)
+    {
+        std::cerr << "SOC sensor failed to open file\n";
+        return;
+    }
+    inputDev.assign(fd);
+
+    std::string dbusPath = sensorPathPrefix + sensorTypeName + name;
+    sensorInterface = objectServer.add_interface(
+        dbusPath, "xyz.openbmc_project.Sensor.Value");
+    for (const auto& threshold : thresholds)
+    {
+        std::string interface = thresholds::getInterface(threshold.level);
+        thresholdInterfaces[static_cast<size_t>(threshold.level)] =
+            objectServer.add_interface(dbusPath, interface);
+    }
+
+    // This should be called before initializing association.
+    // createInventoryAssoc() does add more associations before doing
+    // register and initialize "Associations" property.
+    if (label.empty() || tSize == thresholds.size())
+    {
+        setInitialProperties(sensorTypeName);
+    }
+    else
+    {
+        setInitialProperties(sensorTypeName, label, tSize);
+    }
+    association = objectServer.add_interface(dbusPath, association::interface);
+    createInventoryAssoc(conn, association, configurationPath);
+}
+
+AmpereCPUSensor::~AmpereCPUSensor()
+{
+    waitTimer.cancel();
+    inputDev.close();
+    objServer.remove_interface(sensorInterface);
+    for (const auto& iface : thresholdInterfaces)
+    {
+        objServer.remove_interface(iface);
+    }
+    objServer.remove_interface(association);
+}
+
+void AmpereCPUSensor::setupRead(void)
+{
+    std::shared_ptr<boost::asio::streambuf> buffer =
+        std::make_shared<boost::asio::streambuf>();
+    std::weak_ptr<AmpereCPUSensor> weakRef = weak_from_this();
+    boost::asio::async_read_until(
+        inputDev, *buffer, '\n',
+        [weakRef, buffer](const boost::system::error_code& ec,
+                          std::size_t /*bytes_transfered*/) {
+            std::shared_ptr<AmpereCPUSensor> self = weakRef.lock();
+            if (self)
+            {
+                self->readBuf = buffer;
+                self->handleResponse(ec);
+            }
+        });
+}
+
+void AmpereCPUSensor::handleResponse(const boost::system::error_code& err)
+{
+    if (!err)
+    {
+        std::string response;
+        try
+        {
+            std::istream responseStream(readBuf.get());
+            std::getline(responseStream, response);
+            rawValue = std::stod(response);
+            responseStream.clear();
+            double nvalue = (rawValue / sensorScaleFactor) / sensorFactor;
+            nvalue = std::round(nvalue * roundFactor) / roundFactor;
+
+            updateValue(nvalue);
+        }
+        catch (const std::invalid_argument&)
+        {
+            std::cerr << "Could not parse " << response << "\n";
+        }
+    }
+
+    if (err == boost::system::errc::no_such_device ||
+        err == boost::system::errc::no_such_device_or_address)
+    {
+        updateValue(std::numeric_limits<double>::quiet_NaN());
+    }
+    inputDev.close();
+
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg)
+    int fd = open(path.c_str(), O_RDONLY);
+    if (fd < 0)
+    {
+        std::cerr << "AmpereCPU sensor " << name << " not valid " << path
+                  << "\n";
+        return;
+    }
+
+    inputDev.assign(fd);
+    std::weak_ptr<AmpereCPUSensor> weakRef = weak_from_this();
+    waitTimer.expires_from_now(boost::posix_time::milliseconds(sensorPollMs));
+    waitTimer.async_wait([weakRef](const boost::system::error_code& ec) {
+        std::shared_ptr<AmpereCPUSensor> self = weakRef.lock();
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            std::cerr << "Failed to reschedule\n";
+            return;
+        }
+        if (self)
+        {
+            self->setupRead();
+        }
+    });
+}
+
+void AmpereCPUSensor::checkThresholds(void)
+{
+    if (!readingStateGood())
+    {
+        return;
+    }
+
+    thresholds::checkThresholds(this);
+}
diff --git a/src/AmpereCPUMain.cpp b/src/AmpereCPUMain.cpp
new file mode 100644
index 0000000..55b8b09
--- /dev/null
+++ b/src/AmpereCPUMain.cpp
@@ -0,0 +1,600 @@
+/*
+// Copyright 2021 Ampere Computing LLC
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+*/
+
+#include <AmpereCPU.hpp>
+#include <Utils.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/replace.hpp>
+#include <boost/container/flat_map.hpp>
+#include <boost/container/flat_set.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/bus/match.hpp>
+
+#include <array>
+#include <cmath>
+#include <filesystem>
+#include <fstream>
+#include <functional>
+#include <iostream>
+#include <regex>
+#include <string>
+#include <string_view>
+#include <utility>
+#include <variant>
+#include <vector>
+
+namespace fs = std::filesystem;
+
+static const char* smproDevType =
+    "xyz.openbmc_project.Configuration.smpro_hwmon";
+static const std::string smproDrvName = "smpro_hwmon";
+static boost::container::flat_map<std::string, std::shared_ptr<AmpereCPUSensor>>
+    sensors;
+static boost::container::flat_map<std::string, std::string> sensorTable;
+static boost::container::flat_map<std::string, AmpereCPUProperty> propMatch;
+static std::vector<AmpereCPUProperty> socProperties;
+static std::regex i2cDevRegex(R"((\d+)-([a-fA-F0-9]+))");
+
+static bool createdSensors = false;
+
+bool getDeviceInfo(const std::string& devPath, size_t* bus, size_t* addr)
+{
+    std::smatch match;
+    std::regex_search(devPath, match, i2cDevRegex);
+
+    if (match.empty() || (match.size() != 3))
+    {
+        std::cerr << "Found bad device path " << devPath << "\n";
+        return false;
+    }
+
+    std::string busStr = match[1];
+    std::string addrStr = match[2];
+
+    try
+    {
+        *bus = (size_t)std::stoi(busStr);
+        *addr = (size_t)std::stoi(addrStr, nullptr, 16);
+    }
+    catch (std::invalid_argument&)
+    {
+        std::cerr << "Error parsing bus " << busStr << " addr " << addrStr
+                  << "\n";
+        return false;
+    }
+
+    return true;
+}
+
+bool findMatchConfig(
+    const ManagedObjectType& sensorConfigs,
+    std::pair<std::string,
+              boost::container::flat_map<std::string, BasicVariantType>>*
+        baseConfig,
+    SensorData* sensorData, std::string* interfacePath, std::string* devType,
+    size_t bus, size_t addr)
+{
+    for (const std::pair<sdbusplus::message::object_path, SensorData>& sensor :
+         sensorConfigs)
+    {
+        *sensorData = sensor.second;
+        auto sensorBase = sensorData->find(smproDevType);
+        if (sensorBase == sensorData->end())
+        {
+            std::cerr << "Error finding base configuration for dev " << bus
+                      << ":" << addr << "\n";
+            continue;
+        }
+        *baseConfig = *sensorBase;
+        *devType = smproDevType;
+
+        auto configBus = baseConfig->second.find("Bus");
+        auto configAddress = baseConfig->second.find("Address");
+
+        if (configBus == baseConfig->second.end() ||
+            configAddress == baseConfig->second.end())
+        {
+            std::cerr << "Error finding necessary entry in configuration\n";
+            continue;
+        }
+
+        const uint64_t* confBus = nullptr;
+        const uint64_t* confAddr = nullptr;
+        if (!(confBus = std::get_if<uint64_t>(&(configBus->second))) ||
+            !(confAddr = std::get_if<uint64_t>(&(configAddress->second))))
+        {
+            std::cerr << "Cannot get bus or address, invalid configuration\n";
+            continue;
+        }
+
+        if ((*confBus != bus) || (*confAddr != addr))
+        {
+            continue;
+        }
+        *interfacePath = sensor.first.str;
+
+        return true;
+    }
+
+    return false;
+}
+
+static bool matchSensor(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::pair<std::string,
+                    boost::container::flat_map<std::string, BasicVariantType>>*
+        baseConfig,
+    SensorData* sensorData, const std::string& interfacePath,
+    const std::string& devType, const fs::path& sensorPath,
+    const std::vector<std::string>& findLabels, PowerState readState)
+{
+    bool maxLabel = false;
+    std::regex sensorNameRegEx("([A-Za-z]+)[0-9]*_");
+    std::string sensorNameSubStr{""};
+    std::string sensorNameStr = sensorPath.filename();
+    std::string sensorPathStr = sensorPath.string();
+    std::smatch matches;
+    std::string labelHead;
+
+    if (std::regex_search(sensorNameStr, matches, sensorNameRegEx))
+    {
+        // hwmon *_input filename without number:
+        // in, curr, power, temp, ...
+        sensorNameSubStr = matches[1];
+    }
+    else
+    {
+        std::cerr << "Could not extract the alpha prefix from "
+                  << sensorNameStr;
+        return false;
+    }
+
+    std::string labelPath;
+
+    /* find and differentiate _max and _input to replace "label" */
+    size_t pos = sensorPathStr.find('_');
+    if (pos == std::string::npos)
+    {
+        return false;
+    }
+
+    std::string sensorPathStrMax = sensorPathStr.substr(pos);
+    if (sensorPathStrMax.compare("_max") == 0)
+    {
+        labelPath = boost::replace_all_copy(sensorPathStr, "max", "label");
+        maxLabel = true;
+    }
+    else
+    {
+        labelPath = boost::replace_all_copy(sensorPathStr, "input", "label");
+        maxLabel = false;
+    }
+
+    std::ifstream labelFile(labelPath);
+    if (!labelFile.good())
+    {
+        // hwmon *_input filename with number:
+        // temp1, temp2, temp3, ...
+        labelHead = sensorNameStr.substr(0, sensorNameStr.find('_'));
+    }
+    else
+    {
+        std::string label;
+        std::getline(labelFile, label);
+        labelFile.close();
+        auto findSensor = sensors.find(label);
+        if (findSensor != sensors.end())
+        {
+            return false;
+        }
+
+        // hwmon corresponding *_label file contents:
+        // vin1, vout1, ...
+        labelHead = label.substr(0, label.find(' '));
+    }
+
+    /* append "max" for label */
+    if (maxLabel)
+    {
+        labelHead.insert(0, "max");
+    }
+
+    if (!findLabels.empty())
+    {
+        /* Check if this labelHead is enabled in config file */
+        if (std::find(findLabels.begin(), findLabels.end(), labelHead) ==
+            findLabels.end())
+        {
+            return false;
+        }
+    }
+
+    auto findProperty = propMatch.find(sensorNameSubStr);
+    if (findProperty == propMatch.end())
+    {
+        return false;
+    }
+
+    // Protect the hardcoded propMatch list from changes,
+    // by making a copy and modifying that instead.
+    // Avoid bleedthrough of one device's customizations to
+    // the next device, as each should be independently customizable.
+    socProperties.push_back(findProperty->second);
+    auto socProperty = socProperties.rbegin();
+
+    // Use label head as prefix for reading from config file,
+    // example if temp1: temp1_Name, temp1_Scale, temp1_Min, ...
+    std::string keyName = labelHead + "_Name";
+    std::string keyScale = labelHead + "_Scale";
+    std::string keyMin = labelHead + "_Min";
+    std::string keyMax = labelHead + "_Max";
+
+    auto findCustomName = baseConfig->second.find(keyName);
+    if (findCustomName == baseConfig->second.end())
+    {
+        return false; /* expected that each label have label name */
+    }
+    try
+    {
+        socProperty->labelTypeName =
+            std::visit(VariantToStringVisitor(), findCustomName->second);
+    }
+    catch (std::invalid_argument&)
+    {
+        std::cerr << "Unable to parse " << keyName << "\n";
+        return false;
+    }
+    std::string sensorName = socProperty->labelTypeName;
+    if (sensorName.empty())
+    {
+        // Allow selective disabling of an individual sensor,
+        // by customizing its name to an empty string.
+        std::cerr << "Sensor disabled, empty string\n";
+        return false;
+    }
+
+    bool customizedScale = false;
+    auto findCustomScale = baseConfig->second.find(keyScale);
+    if (findCustomScale != baseConfig->second.end())
+    {
+        try
+        {
+            socProperty->sensorScaleFactor = std::visit(
+                VariantToUnsignedIntVisitor(), findCustomScale->second);
+        }
+        catch (std::invalid_argument&)
+        {
+            std::cerr << "Unable to parse " << keyScale << "\n";
+            return false;
+        }
+
+        // Avoid later division by zero
+        if (socProperty->sensorScaleFactor > 0)
+        {
+            customizedScale = true;
+        }
+        else
+        {
+            std::cerr << "Unable to accept " << keyScale << "\n";
+            return false;
+        }
+    }
+    // Use device's scale factor
+    unsigned int factor = socProperty->sensorScaleFactor;
+    if (!customizedScale)
+    {
+        // Preserve existing usage of hardcoded labelMatch table below
+        factor = std::pow(10.0, factor);
+
+        /* Change first char of substring to uppercase */
+        char firstChar = static_cast<char>(std::toupper(sensorNameSubStr[0]));
+        std::string strScaleFactor =
+            firstChar + sensorNameSubStr.substr(1) + "ScaleFactor";
+
+        // Preserve existing configs by accepting earlier syntax,
+        // example CurrScaleFactor, PowerScaleFactor, ...
+        auto findScaleFactor = baseConfig->second.find(strScaleFactor);
+        if (findScaleFactor != baseConfig->second.end())
+        {
+            factor = std::visit(VariantToIntVisitor(), findScaleFactor->second);
+        }
+    }
+
+    auto findCustomMin = baseConfig->second.find(keyMin);
+    if (findCustomMin != baseConfig->second.end())
+    {
+        try
+        {
+            socProperty->minReading =
+                std::visit(VariantToDoubleVisitor(), findCustomMin->second);
+        }
+        catch (std::invalid_argument&)
+        {
+            std::cerr << "Unable to parse " << keyMin << "\n";
+            return false;
+        }
+    }
+    auto findCustomMax = baseConfig->second.find(keyMax);
+    if (findCustomMax != baseConfig->second.end())
+    {
+        try
+        {
+            socProperty->maxReading =
+                std::visit(VariantToDoubleVisitor(), findCustomMax->second);
+        }
+        catch (std::invalid_argument&)
+        {
+            std::cerr << "Unable to parse " << keyMax << "\n";
+            return false;
+        }
+    }
+    if (!(socProperty->minReading < socProperty->maxReading))
+    {
+        std::cerr << "Min must be less than Max\n";
+        return false;
+    }
+
+    std::vector<thresholds::Threshold> sensorThresholds;
+    if (!parseThresholdsFromConfig(*sensorData, sensorThresholds, &labelHead))
+    {
+        std::cerr << "Error populating thresholds for " << sensorNameSubStr
+                  << "\n";
+    }
+
+    auto findSensorType = sensorTable.find(sensorNameSubStr);
+    if (findSensorType == sensorTable.end())
+    {
+        std::cerr << sensorNameSubStr << " is not a recognized sensor type\n";
+        return false;
+    }
+
+    // destruct existing one first if already created
+    sensors[sensorName] = nullptr;
+    sensors[sensorName] = std::make_shared<AmpereCPUSensor>(
+        sensorPathStr, devType, objectServer, dbusConnection, io, sensorName,
+        std::move(sensorThresholds), interfacePath, findSensorType->second,
+        factor, socProperty->maxReading, socProperty->minReading, labelHead,
+        sensorThresholds.size(), readState);
+    sensors[sensorName]->setupRead();
+
+    return true;
+}
+
+static bool parseSensorConfig(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const std::pair<std::string,
+                    boost::container::flat_map<std::string, BasicVariantType>>*
+        baseConfig,
+    SensorData* sensorData, const std::string& interfacePath,
+    const std::string& sensorType, const fs::path& directory, int* numSensors)
+{
+    int numCreated = 0;
+    std::vector<fs::path> sensorPaths;
+
+    auto findSOCName = baseConfig->second.find("Name");
+    if (findSOCName == baseConfig->second.end())
+    {
+        std::cerr << "Could not determine configuration name for "
+                  << interfacePath << "\n";
+        return false;
+    }
+
+    if (!findFiles(directory, R"(\w\d+_input$)", sensorPaths, 0))
+    {
+        std::cerr << "No SOC non-label sensor in SOC\n";
+        return false;
+    }
+    /* read max value in sysfs for in, curr, power, temp, ... */
+    if (!findFiles(directory, R"(\w\d+_max$)", sensorPaths, 0))
+    {
+        std::cout << "No max name in SOC \n";
+    }
+
+    auto findPowerOn = baseConfig->second.find("PowerState");
+    PowerState readState = PowerState::always;
+    if (findPowerOn != baseConfig->second.end())
+    {
+        std::string powerState =
+            std::visit(VariantToStringVisitor(), findPowerOn->second);
+        setReadState(powerState, readState);
+    }
+
+    /* Find array of labels to be exposed if it is defined in config */
+    std::vector<std::string> findLabels;
+    auto findLabelObj = baseConfig->second.find("Labels");
+    if (findLabelObj != baseConfig->second.end())
+    {
+        findLabels = std::get<std::vector<std::string>>(findLabelObj->second);
+    }
+    for (const auto& sensorPath : sensorPaths)
+    {
+        auto ret = matchSensor(io, objectServer, dbusConnection, baseConfig,
+                               sensorData, interfacePath, sensorType,
+                               sensorPath, findLabels, readState);
+        if (!ret)
+        {
+            continue;
+        }
+        numCreated++;
+    }
+    *numSensors = numCreated;
+
+    return true;
+}
+
+static void createSensorsCallback(
+    boost::asio::io_service& io, sdbusplus::asio::object_server& objectServer,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection,
+    const ManagedObjectType& sensorConfigs)
+{
+    std::vector<fs::path> busPaths;
+
+    if (!findFiles(fs::path("/sys/class/hwmon"), "name", busPaths))
+    {
+        std::cerr << "No SOC sensors in system\n";
+        return;
+    }
+
+    boost::container::flat_set<std::string> directories;
+    for (const auto& busPath : busPaths)
+    {
+        boost::container::flat_map<std::string, std::vector<std::string>>
+            eventPathList;
+        boost::container::flat_map<
+            std::string,
+            boost::container::flat_map<std::string, std::vector<std::string>>>
+            groupEventPathList;
+
+        std::ifstream nameFile(busPath);
+        if (!nameFile.good())
+        {
+            std::cerr << "Failure finding SoC sensors path " << busPath << "\n";
+            continue;
+        }
+
+        std::string busName;
+        std::getline(nameFile, busName);
+        nameFile.close();
+        if (busName != smproDrvName)
+        {
+            continue;
+        }
+
+        auto directory = busPath.parent_path();
+        auto ret = directories.insert(directory.string());
+        if (!ret.second)
+        {
+            std::cerr << "Duplicate path " << directory.string() << "\n";
+            continue;
+        }
+
+        size_t bus = 0;
+        size_t addr = 0;
+        fs::path device = directory / "device";
+        std::string devPath = fs::canonical(device);
+        if (!getDeviceInfo(devPath, &bus, &addr))
+        {
+            continue;
+        }
+
+        std::pair<std::string,
+                  boost::container::flat_map<std::string, BasicVariantType>>
+            baseConfig;
+        SensorData sensorData;
+        std::string interfacePath;
+        std::string devType;
+        bool retVal = findMatchConfig(sensorConfigs, &baseConfig, &sensorData,
+                                      &interfacePath, &devType, bus, addr);
+        if (!retVal)
+        {
+            std::cerr << "Failed to find match for " << devPath << "\n";
+            continue;
+        }
+
+        int numCreated = 0;
+        parseSensorConfig(io, objectServer, dbusConnection, &baseConfig,
+                          &sensorData, interfacePath, devType, directory,
+                          &numCreated);
+
+        if (numCreated)
+        {
+            createdSensors = true;
+        }
+
+        std::cerr << "Device " << bus << ":" << addr << " have " << numCreated
+                  << " sensors \n";
+    }
+
+    return;
+}
+
+void createSensors(boost::asio::io_service& io,
+                   sdbusplus::asio::object_server& objectServer,
+                   std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    auto getter = std::make_shared<GetSensorConfiguration>(
+        dbusConnection, [&io, &objectServer, &dbusConnection](
+                            const ManagedObjectType& sensorConfigs) {
+            if (!createdSensors)
+            {
+                createSensorsCallback(io, objectServer, dbusConnection,
+                                      sensorConfigs);
+            }
+        });
+    getter->getConfiguration(std::vector<std::string>{smproDevType});
+}
+
+void propertyInitialize(void)
+{
+    sensorTable = {{"power", "power/"},
+                   {"curr", "current/"},
+                   {"temp", "temperature/"},
+                   {"in", "voltage/"}};
+
+    propMatch = {{"power", AmpereCPUProperty("Power Property", 30000, 0, 1)},
+                 {"curr", AmpereCPUProperty("Curr property", 30000, 0, 1)},
+                 {"temp", AmpereCPUProperty("Temp property", 255, 0, 1)},
+                 {"in", AmpereCPUProperty("Voltage property", 30000, 0, 1)}};
+}
+
+int main()
+{
+    boost::asio::io_service io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    std::vector<std::unique_ptr<sdbusplus::bus::match::match>> matches;
+
+    systemBus->request_name("xyz.openbmc_project.AmpereCPUSensor");
+    sdbusplus::asio::object_server objectServer(systemBus);
+    propertyInitialize();
+
+    boost::asio::deadline_timer filterTimer(io);
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message& message) {
+            if (message.is_method_error())
+            {
+                std::cerr << "Callback method error\n";
+                return;
+            }
+
+            filterTimer.expires_from_now(boost::posix_time::seconds(1));
+            filterTimer.async_wait([&](const boost::system::error_code& ec) {
+                if (ec == boost::asio::error::operation_aborted)
+                {
+                    return;
+                }
+                if (ec)
+                {
+                    std::cerr << "timer error\n";
+                }
+                createSensors(io, objectServer, systemBus);
+            });
+        };
+
+    auto matchPropChanged = std::make_unique<sdbusplus::bus::match::match>(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',member='PropertiesChanged',path_namespace='" +
+            std::string(inventoryPath) + "',arg0namespace='" + smproDevType +
+            "'",
+        eventHandler);
+    matches.emplace_back(std::move(matchPropChanged));
+
+    io.run();
+
+    return 0;
+}
diff --git a/src/meson.build b/src/meson.build
index e420b27..045b4ff 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -179,6 +179,25 @@ if get_option('psu').enabled()
     )
 endif
 
+if get_option('ampere-cpu').enabled()
+    executable(
+        'amperecpusensor',
+        'AmpereCPU.cpp',
+        'AmpereCPUMain.cpp',
+        dependencies: [
+            gpiodcxx,
+            sdbusplus,
+        ],
+        implicit_include_directories: false,
+        include_directories: '../include',
+        install: true,
+        link_with: [
+            thresholds_a,
+            utils_a,
+        ],
+    )
+endif
+
 if get_option('external').enabled()
     executable(
         'externalsensor',
-- 
2.25.1

