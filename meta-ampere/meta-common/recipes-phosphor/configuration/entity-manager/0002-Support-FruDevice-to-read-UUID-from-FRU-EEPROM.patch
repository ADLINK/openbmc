From 672f1181684533a033c1a804ab59b61070e81dc8 Mon Sep 17 00:00:00 2001
From: hule <hule@amperecomputing.com>
Date: Wed, 8 Sep 2021 22:00:43 +0700
Subject: [PATCH] meta-ampere: FruDevice: Support parsing Multirecord UUID

Extend entity-manager's FruDevice to read UUID from FRU EEPROM
and update to dbus at MULTIRECORD_UUID.

Tested result:
Check UUID from FruDevice dbus:
$ busctl introspect xyz.openbmc_project.FruDevice
/xyz/openbmc_project/FruDevice/Mt_Jade_Motherboard | grep UUID
.MULTIRECORD_UUID property  s "3f983c5a-a3c0-11ea-a4c2-fcd1d87ac40c"

Signed-off-by: hule <hule@amperecomputing.com>
---
 include/FruUtils.hpp |  4 +-
 src/FruUtils.cpp     | 92 +++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 94 insertions(+), 2 deletions(-)

diff --git a/include/FruUtils.hpp b/include/FruUtils.hpp
index 74f80e4..7343603 100644
--- a/include/FruUtils.hpp
+++ b/include/FruUtils.hpp
@@ -31,6 +31,8 @@ extern "C"
 }
 
 constexpr size_t fruBlockSize = 8;
+#define uuidDataLength 16
+#define multiRecordHeaderLen 5
 
 enum class DecodeState
 {
@@ -107,7 +109,7 @@ std::pair<DecodeState, std::string>
                   bool isLangEng);
 
 bool checkLangEng(uint8_t lang);
-
+void parserUuidMultirecord(std::vector<uint8_t> device, boost::container::flat_map<std::string, std::string>& result);
 resCodes
     formatFRU(const std::vector<uint8_t>& fruBytes,
               boost::container::flat_map<std::string, std::string>& result);
diff --git a/src/FruUtils.cpp b/src/FruUtils.cpp
index 8b7a2e2..b704c45 100644
--- a/src/FruUtils.cpp
+++ b/src/FruUtils.cpp
@@ -62,6 +62,32 @@ enum FRUDataEncoding
     languageDependent = 0x3,
 };
 
+enum MultiRecordType
+{
+    powerSupInfo = 0x00,
+    dcOut = 0x01,
+    dcLoad = 0x02,
+    managementAccessRecord = 0x03,
+    baseCompatibilityRecord = 0x04,
+    extendedCompatibilityRecord = 0x05,
+    resAsfSMBusDeviceRecord = 0x06,
+    resAsfLegacyDeviceAlerts = 0x07,
+    resAsfRemoteControl = 0x08,
+    extendedDCOutput = 0x09,
+    extendedDCLoad = 0x0A
+};
+
+enum SubManagementAccessRecord
+{
+    systemManagementURL = 0x01,
+    systemName = 0x02,
+    systemPingAddress = 0x03,
+    componentManagementURL = 0x04,
+    componentName = 0x05,
+    componentPingAddress = 0x06,
+    systemUniqueID = 0x07
+};
+
 /* Decode FRU data into a std::string, given an input iterator and end. If the
  * state returned is fruDataOk, then the resulting string is the decoded FRU
  * data. The input iterator is advanced past the data consumed.
@@ -455,10 +481,74 @@ resCodes formatFRU(const std::vector<uint8_t>& fruBytes,
             }
         }
     }
-
+    parserUuidMultirecord(fruBytes, result);
     return ret;
 }
 
+void parserUuidMultirecord(std::vector<uint8_t> device, boost::container::flat_map<std::string, std::string>& result)
+{
+    char hexString[20];
+    std::string uuidStr;
+    const unsigned char* uuidBin;
+    unsigned int areaOffset = device[getHeaderAreaFieldOffset(fruAreas::fruAreaMultirecord)];
+    areaOffset *= fruBlockSize;
+    constexpr uint8_t multiRecordEndOfListMask = 0x80;
+    unsigned char uuidReorder[uuidDataLength] = {};
+    const unsigned char uuidCharOrder[uuidDataLength] = {3, 2, 1, 0, 5, 4, 7, 6, 8,
+                                                        9, 15, 14, 13, 12, 11, 10};
+    if (device[5] != 0)
+    {
+        while (areaOffset < device.size())
+        {
+            int recordLength = device[areaOffset + 2];
+            if ((int)device[areaOffset] == (int)MultiRecordType::managementAccessRecord)
+            {
+                if ((int)device[areaOffset + multiRecordHeaderLen] == (int)SubManagementAccessRecord::systemUniqueID)
+                {
+                    /*
+                    * Layout of UUID:
+                    * source: https://www.ietf.org/rfc/rfc4122.txt
+                    *
+                    * UUID binary format (16 bytes):
+                    *
+                    * 4B-2B-2B-2B-6B (big endian)
+                    *
+                    * UUID string is 36 length of characters (36 bytes):
+                    *
+                    * 0        9    14   19   24
+                    * xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
+                    *    be     be   be   be       be
+                    * be means it should be converted to big endian.
+                    */
+                    /* Reformat the UUID data folow the RFC4122 */
+                    for(int i = 0; i < uuidDataLength; i++)
+                    {
+                        uuidReorder[i] = device[areaOffset + 6 + uuidCharOrder[i]];
+                    }
+                    uuidBin = (unsigned char*)uuidReorder;
+                    /* Get UUID bytes to UUID string */
+                    for(int i = 0; i < uuidDataLength; i++)
+                    {
+                        sprintf(hexString, "%02x", uuidBin[i]);
+                        uuidStr += hexString;
+                    }
+                    result["MULTIRECORD_UUID"] = uuidStr.substr(0,8) + '-' + uuidStr.substr(8,4) + '-' + uuidStr.substr(12,4) + '-' + uuidStr.substr(16,4) + '-' + uuidStr.substr(20,12);
+                    break;
+                }
+            }
+            if (device[areaOffset + 1] & multiRecordEndOfListMask)
+            {
+                break;
+            }
+            else
+            {
+                areaOffset = areaOffset + recordLength + multiRecordHeaderLen;
+            }
+        }
+    }
+}
+
+
 // Calculate new checksum for fru info area
 uint8_t calculateChecksum(std::vector<uint8_t>::const_iterator iter,
                           std::vector<uint8_t>::const_iterator end)
-- 
2.17.1

