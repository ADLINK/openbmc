From c9ba8d6d2ceee955cd7660afce313833f703bbc9 Mon Sep 17 00:00:00 2001
From: Dung Cao <dung@os.amperecomputing.com>
Date: Wed, 2 Nov 2022 10:00:10 +0700
Subject: [PATCH] Add encode/decode for EventMessageBufferSize

Added encode API for EventMessageBufferSize command(0x0C) which
is defined in DSP02408 Version 1.2.1 sec:16.9.

Signed-off-by: Dung Cao <dung@os.amperecomputing.com>
Change-Id: Id3f00706b3d3a1871aa6491cc0ffe2ee42597258
---
 include/libpldm/platform.h      | 46 +++++++++++++++++++
 src/platform.c                  | 53 ++++++++++++++++++++++
 tests/libpldm_platform_test.cpp | 79 +++++++++++++++++++++++++++++++++
 3 files changed, 178 insertions(+)

diff --git a/include/libpldm/platform.h b/include/libpldm/platform.h
index cd1f3fa..9491597 100644
--- a/include/libpldm/platform.h
+++ b/include/libpldm/platform.h
@@ -36,6 +36,10 @@ extern "C" {
 #define PLDM_EVENT_SUPPORTED_RESP_BYTES 20
 #define PLDM_EVENT_MESSAGE_SUPPORTED_MIN_RESP_BYTES 4
 
+#define PLDM_EVENT_MESSAGE_BUFFER_SIZE_REQ_BYTES 1
+#define PLDM_EVENT_MESSAGE_BUFFER_SIZE_RESP_BYTES 3
+#define PLDM_EVENT_MESSAGE_BUFFER_MAX_BUFFER_SIZE 256
+
 /* Minimum response length */
 #define PLDM_GET_PDR_MIN_RESP_BYTES 12
 #define PLDM_GET_NUMERIC_EFFECTER_VALUE_MIN_RESP_BYTES 5
@@ -137,6 +141,7 @@ enum pldm_platform_commands {
 	PLDM_PLATFORM_EVENT_MESSAGE = 0x0A,
 	PLDM_POLL_FOR_EVENT_MESSAGE = 0x0B,
 	PLDM_EVENT_MESSAGE_SUPPORTED = 0xC,
+	PLDM_EVENT_MESSAGE_BUFFER_SIZE = 0xD,
 };
 
 /** @brief PLDM PDR types
@@ -813,6 +818,24 @@ struct pldm_event_message_supported_resp {
 	uint8_t event_class[1];
 } __attribute__((packed));
 
+/** @struct pldm_event_message_buffer_size_req
+ *
+ *  structure representing EventMessageBufferSizes command request data
+ */
+struct pldm_event_message_buffer_size_req {
+	uint8_t buffer_size;
+} __attribute__((packed));
+
+/** @struct pldm_event_message_buffer_size_resp
+ *
+ *  structure representing EventMessageBufferSizes command response data
+ * data
+ */
+struct pldm_event_message_buffer_size_resp {
+	uint8_t completion_code;
+	uint16_t terminus_max_buffer_size;
+} __attribute__((packed));
+
 /** @struct pldm_set_numeric_effecter_value_req
  *
  *  structure representing SetNumericEffecterValue request packet
@@ -1624,6 +1647,29 @@ int decode_event_message_supported_resp(
     uint8_t *number_event_class_returned, uint8_t *event_class,
     uint8_t event_class_count);
 
+/** @brief Decode EventMessageBufferSize response data
+ * @param[in] msg - Request message
+ * @param[in] payload_length - Length of Response message payload
+ * @param[out] completion_code - PLDM completion code
+ * @return pldm_completion_codes
+ */
+int decode_event_message_buffer_size_resp(const struct pldm_msg *msg,
+					  size_t payload_length,
+					  uint8_t *completion_code,
+					  uint16_t *terminus_max_buffer_size);
+
+/** @brief Encode EventMessageBufferSize request data
+ * @param[in] instance_id - Message's instance id
+ * @param[in] event_receiver_max_buffer_size - Max buffer size
+ * @param[out] msg - Request message
+ * @return pldm_completion_codes
+ * @note Caller is responsible for memory alloc and dealloc of param
+ * 'msg.payload'
+ */
+int encode_event_message_buffer_size_req(
+    uint8_t instance_id, uint16_t event_receiver_max_buffer_size,
+    struct pldm_msg *msg);
+
 /** @brief Decode sensorEventData response data
  *
  *  @param[in] event_data - event data from the response message
diff --git a/src/platform.c b/src/platform.c
index 6e76240..d1e989a 100644
--- a/src/platform.c
+++ b/src/platform.c
@@ -1064,6 +1064,59 @@ int decode_event_message_supported_resp(
 	return PLDM_SUCCESS;
 }
 
+int encode_event_message_buffer_size_req(
+    uint8_t instance_id, uint16_t event_receiver_max_buffer_size,
+    struct pldm_msg *msg)
+{
+	if (event_receiver_max_buffer_size >
+	    PLDM_EVENT_MESSAGE_BUFFER_MAX_BUFFER_SIZE) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	struct pldm_header_info header = {0};
+	header.msg_type = PLDM_REQUEST;
+	header.instance = instance_id;
+	header.pldm_type = PLDM_PLATFORM;
+	header.command = PLDM_EVENT_MESSAGE_BUFFER_SIZE;
+
+	uint8_t rc = pack_pldm_header(&header, &(msg->hdr));
+	if (rc != PLDM_SUCCESS) {
+		return rc;
+	}
+
+	struct pldm_event_message_buffer_size_req *request =
+	    (struct pldm_event_message_buffer_size_req *)msg->payload;
+	request->buffer_size = event_receiver_max_buffer_size;
+
+	return PLDM_SUCCESS;
+}
+
+int decode_event_message_buffer_size_resp(const struct pldm_msg *msg,
+					  size_t payload_length,
+					  uint8_t *completion_code,
+					  uint16_t *terminus_max_buffer_size)
+{
+	if (msg == NULL || completion_code == NULL ||
+	    terminus_max_buffer_size == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	*completion_code = msg->payload[0];
+	if (PLDM_SUCCESS != *completion_code) {
+		return PLDM_SUCCESS;
+	}
+	if (payload_length != PLDM_EVENT_MESSAGE_BUFFER_SIZE_RESP_BYTES) {
+		return PLDM_ERROR_INVALID_LENGTH;
+	}
+
+	struct pldm_event_message_buffer_size_resp *response =
+	    (struct pldm_event_message_buffer_size_resp *)msg->payload;
+
+	*terminus_max_buffer_size = response->terminus_max_buffer_size;
+
+	return PLDM_SUCCESS;
+}
+
 int decode_sensor_event_data(const uint8_t *event_data,
 			     size_t event_data_length, uint16_t *sensor_id,
 			     uint8_t *sensor_event_class_type,
diff --git a/tests/libpldm_platform_test.cpp b/tests/libpldm_platform_test.cpp
index 5f6704b..3a61a69 100644
--- a/tests/libpldm_platform_test.cpp
+++ b/tests/libpldm_platform_test.cpp
@@ -1127,6 +1127,85 @@ TEST(PlatformEventMessageSupported, testBadDecodeRespond)
     EXPECT_EQ(rc, PLDM_ERROR_INVALID_LENGTH);
 }
 
+TEST(EventMessageBufferSize, testGoodEventMessageBufferSizeRequest)
+{
+    uint8_t eventBufferSize = 32;
+
+    std::array<uint8_t, hdrSize + PLDM_EVENT_SUPPORTED_REQ_BYTES> requestMsg{};
+    auto request = reinterpret_cast<pldm_msg*>(requestMsg.data());
+
+    auto rc = encode_event_message_buffer_size_req(0, eventBufferSize, request);
+
+    EXPECT_EQ(rc, PLDM_SUCCESS);
+}
+
+TEST(EventMessageBufferSize, testBadEventMessageBufferSizeRequest)
+{
+    uint16_t eventBufferSize = 512;
+
+    std::array<uint8_t, hdrSize + PLDM_EVENT_SUPPORTED_REQ_BYTES> requestMsg{};
+    auto request = reinterpret_cast<pldm_msg*>(requestMsg.data());
+
+    auto rc = encode_event_message_buffer_size_req(0, eventBufferSize, request);
+
+    EXPECT_EQ(rc, PLDM_ERROR_INVALID_DATA);
+}
+
+TEST(EventMessageBufferSize, testGoodEventMessageBufferSizeResponse)
+{
+    uint8_t completionCode = PLDM_SUCCESS;
+    uint16_t terminusMaxBufferSize = 256;
+
+    std::array<uint8_t, hdrSize + PLDM_EVENT_MESSAGE_BUFFER_SIZE_RESP_BYTES>
+        responseMsg{};
+
+    uint8_t retCompletionCode;
+    uint16_t retMaxBufferSize = 0;
+
+    auto response = reinterpret_cast<pldm_msg*>(responseMsg.data());
+    struct pldm_event_message_buffer_size_resp* resp =
+        reinterpret_cast<struct pldm_event_message_buffer_size_resp*>(
+            response->payload);
+
+    resp->completion_code = completionCode;
+    resp->terminus_max_buffer_size = terminusMaxBufferSize;
+
+    auto rc = decode_event_message_buffer_size_resp(
+        response, responseMsg.size() - hdrSize, &retCompletionCode,
+        &retMaxBufferSize);
+
+    EXPECT_EQ(rc, PLDM_SUCCESS);
+    EXPECT_EQ(retCompletionCode, completionCode);
+    EXPECT_EQ(terminusMaxBufferSize, retMaxBufferSize);
+}
+
+TEST(EventMessageBufferSize, testBadEventMessageBufferSizeResponse)
+{
+    uint8_t completionCode = PLDM_SUCCESS;
+    uint16_t terminusMaxBufferSize = 256;
+
+    std::array<uint8_t, hdrSize + PLDM_EVENT_MESSAGE_BUFFER_SIZE_RESP_BYTES>
+        responseMsg{};
+
+    uint8_t retCompletionCode;
+    uint16_t retMaxBufferSize = 0;
+
+    auto response = reinterpret_cast<pldm_msg*>(responseMsg.data());
+    struct pldm_event_message_buffer_size_resp* resp =
+        reinterpret_cast<struct pldm_event_message_buffer_size_resp*>(
+            response->payload);
+    resp->completion_code = completionCode;
+    resp->terminus_max_buffer_size = terminusMaxBufferSize;
+
+    auto rc =
+        decode_event_message_buffer_size_resp(response, 0, nullptr, nullptr);
+    EXPECT_EQ(rc, PLDM_ERROR_INVALID_DATA);
+
+    rc = decode_event_message_buffer_size_resp(
+        response, responseMsg.size(), &retCompletionCode, &retMaxBufferSize);
+    EXPECT_EQ(rc, PLDM_ERROR_INVALID_LENGTH);
+}
+
 TEST(PlatformEventMessage, testGoodStateSensorDecodeRequest)
 {
     std::array<uint8_t,
-- 
2.17.1

