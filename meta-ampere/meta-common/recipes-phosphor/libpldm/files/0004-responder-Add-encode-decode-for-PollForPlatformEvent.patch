From 600949d878ff1ee98489b713ceda280f864aa2c5 Mon Sep 17 00:00:00 2001
From: Dung Cao <dung@os.amperecomputing.com>
Date: Wed, 16 Nov 2022 22:34:55 +0700
Subject: [PATCH] responder: Add encode/decode for PollForPlatformEventMessage

Added encode API for PollForPlatformEventMessage command(0x0B) which
is defined in DSP02408 Version 1.2.1 sec:16.7.

Signed-off-by: Dung Cao <dung@os.amperecomputing.com>
Change-Id: Ic4a91625c9e30b49a9a3ea99755dffff2c667ca8
---
 include/libpldm/platform.h | 21 +++++++++++
 src/platform.c             | 74 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+)

diff --git a/include/libpldm/platform.h b/include/libpldm/platform.h
index 657d6e6..b0a80be 100644
--- a/include/libpldm/platform.h
+++ b/include/libpldm/platform.h
@@ -1451,6 +1451,21 @@ int decode_platform_event_message_req(const struct pldm_msg *msg,
 				      uint8_t *event_class,
 				      size_t *event_data_offset);
 
+/** @brief Decode PollForEventMessage request data
+ *  @param[in] msg - Request message
+ *  @param[in] payload_length - Length of response message payload
+ *  @param[out] format_version - Version of the event format
+ *  @param[out] transfer_operation_flag - The transfer operation flag
+ *  @param[out] data_transfer_handle - The data transfer handle
+ *  @param[out] event_id_to_acknowledge - The class of event being sent
+ * from pldm msg
+ *  @return pldm_completion_codes
+ */
+int decode_poll_for_platform_event_message_req(
+    const struct pldm_msg *msg, size_t payload_length, uint8_t *format_version,
+    uint8_t *transfer_operation_flag, uint32_t *data_transfer_handle,
+    uint16_t *event_id_to_acknowledge);
+
 /** @brief Encode PlatformEventMessage response data
  *  @param[in] instance_id - Message's instance id
  *  @param[in] completion_code - PLDM completion code
@@ -1466,6 +1481,12 @@ int encode_platform_event_message_resp(uint8_t instance_id,
 				       uint8_t platform_event_status,
 				       struct pldm_msg *msg);
 
+int encode_poll_for_platform_event_message_resp(
+    uint8_t instance_id, uint8_t completion_code, uint8_t tid,
+    uint16_t event_id, uint32_t next_data_transfer_handle,
+    uint8_t transfer_flag, uint8_t event_class, uint32_t event_data_size,
+    uint8_t *event_data, uint32_t checksum, struct pldm_msg *msg);
+
 /** @brief Encode PlatformEventMessage request data
  * @param[in] instance_id - Message's instance id
  * @param[in] format_version - Version of the event format
diff --git a/src/platform.c b/src/platform.c
index 5f9efee..2f2b05e 100644
--- a/src/platform.c
+++ b/src/platform.c
@@ -812,6 +812,33 @@ int decode_platform_event_message_req(const struct pldm_msg *msg,
 	return PLDM_SUCCESS;
 }
 
+int decode_poll_for_platform_event_message_req(
+    const struct pldm_msg *msg, size_t payload_length, uint8_t *format_version,
+    uint8_t *transfer_operation_flag, uint32_t *data_transfer_handle,
+    uint16_t *event_id_to_acknowledge)
+{
+
+	if (msg == NULL || format_version == NULL ||
+	    transfer_operation_flag == NULL || data_transfer_handle == NULL ||
+	    event_id_to_acknowledge == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	if (payload_length < PLDM_POLL_FOR_PLATFORM_EVENT_MESSAGE_REQ_BYTES) {
+		return PLDM_ERROR_INVALID_LENGTH;
+	}
+
+	struct pldm_poll_for_platform_event_message_req *response =
+	    (struct pldm_poll_for_platform_event_message_req *)msg->payload;
+
+	*format_version = response->format_version;
+	*transfer_operation_flag = response->transfer_operation_flag;
+	*data_transfer_handle = htole32(response->data_transfer_handle);
+	*event_id_to_acknowledge = htole16(response->event_id_to_acknowledge);
+
+	return PLDM_SUCCESS;
+}
+
 int encode_platform_event_message_resp(uint8_t instance_id,
 				       uint8_t completion_code,
 				       uint8_t platform_event_status,
@@ -844,6 +871,53 @@ int encode_platform_event_message_resp(uint8_t instance_id,
 	return PLDM_SUCCESS;
 }
 
+int encode_poll_for_platform_event_message_resp(
+    uint8_t instance_id, uint8_t completion_code, uint8_t tid,
+    uint16_t event_id, uint32_t next_data_transfer_handle,
+    uint8_t transfer_flag, uint8_t event_class, uint32_t event_data_size,
+    uint8_t *event_data, uint32_t checksum, struct pldm_msg *msg)
+{
+	if (msg == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	struct pldm_header_info header = {0};
+	header.msg_type = PLDM_RESPONSE;
+	header.instance = instance_id;
+	header.pldm_type = PLDM_PLATFORM;
+	header.command = PLDM_POLL_FOR_EVENT_MESSAGE;
+
+	uint8_t rc = pack_pldm_header(&header, &(msg->hdr));
+	if (rc != PLDM_SUCCESS) {
+		return rc;
+	}
+
+	struct pldm_poll_for_platform_event_message_resp *response =
+	    (struct pldm_poll_for_platform_event_message_resp *)msg->payload;
+	response->completion_code = completion_code;
+	response->tid = tid;
+	response->event_id = htole16(event_id);
+	response->next_data_transfer_handle =
+	    htole32(next_data_transfer_handle);
+	response->transfer_flag = transfer_flag;
+	response->event_class = event_class;
+	response->event_data_size = htole32(event_data_size);
+	memcpy(response->event_data, event_data, event_data_size);
+
+	// add the checksum at the end
+	if (transfer_flag == PLDM_END || transfer_flag == PLDM_START_AND_END) {
+		uint8_t *dst = msg->payload;
+		// calculate the offset of checksum
+		dst +=
+		    (sizeof(struct pldm_poll_for_platform_event_message_resp) -
+		     1 - 4) +
+		    event_data_size;
+		memcpy(dst, &checksum, sizeof(uint32_t));
+	}
+
+	return PLDM_SUCCESS;
+}
+
 int encode_platform_event_message_req(
     uint8_t instance_id, uint8_t format_version, uint8_t tid,
     uint8_t event_class, const uint8_t *event_data, size_t event_data_length,
-- 
2.17.1

