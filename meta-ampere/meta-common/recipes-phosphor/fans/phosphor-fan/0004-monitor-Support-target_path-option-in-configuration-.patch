From caee7dc91c32e60869f8c58e35c2f00fc44181aa Mon Sep 17 00:00:00 2001
From: Chanh Nguyen <chanh@os.amperecomputing.com>
Date: Mon, 21 Mar 2022 04:42:17 +0000
Subject: [PATCH 4/6] monitor: Support target_path option in configuration file

The target path contain the interface xyz.openbmc_project.control.Fan* can be
difference between phosphor-hwmon and dbus-sensor.

In phosphor-hwmon, it is "/xyz/openbmc_project/sensors/fan_tach/".
In dbus-sensor, it is "/xyz/openbmc_project/control/fanpwm/"

This commit supports setting this option in the configuration file.

Tested:  Make sure phosphor-fan-monitor can monitor the fan.

Signed-off-by: Chanh Nguyen <chanh@os.amperecomputing.com>
---
 monitor/example/monitor.yaml    |  6 ++++++
 monitor/fan.cpp                 |  3 ++-
 monitor/gen-fan-monitor-defs.py |  4 ++++
 monitor/json_parser.cpp         |  8 +++++++-
 monitor/tach_sensor.cpp         | 32 +++++++++++++++++++++++++-------
 monitor/tach_sensor.hpp         | 18 ++++++++++++++++--
 monitor/trust_group.hpp         |  2 +-
 monitor/types.hpp               | 15 ++++++++-------
 8 files changed, 69 insertions(+), 19 deletions(-)

diff --git a/monitor/example/monitor.yaml b/monitor/example/monitor.yaml
index 8d70c4f..e0495cb 100644
--- a/monitor/example/monitor.yaml
+++ b/monitor/example/monitor.yaml
@@ -28,6 +28,10 @@
 #                  setting a fan speed (otherwise just for reads)]
 #      target_interface [The fan target interface used by the sensor.
 #                        Default is "xyz.openbmc_project.Control.FanSpeed"]
+#      target_path: [The full target path, which implement
+#                    xyz.openbmc_project.Control.FanSpeed or
+#                    xyz.openbmc_project.Control.FanPwm interface
+#                    Default is /xyz/openbmc_project/sensors/fan_tach/
 #      factor [The factor to multiply with target to calculate the expected
 #              fan speed. Default is 1 for fan speed target;
 #              Customized value for pwm target]
@@ -76,6 +80,8 @@
 #    sensors:
 #      - name: fan0
 #        has_target: true
+#        target_path: /xyz/openbmc_project/control/fanpwm/PWM3
+#        target_interface: xyz.openbmc_project.Control.FanPwm
 #    # Only create fan functional properties and monitor on air cooled
 #    condition:
 #      name: propertiesMatch
diff --git a/monitor/fan.cpp b/monitor/fan.cpp
index 508d6ac..108eab8 100644
--- a/monitor/fan.cpp
+++ b/monitor/fan.cpp
@@ -69,7 +69,8 @@ Fan::Fan(Mode mode, sdbusplus::bus::bus& bus, const sdeventplus::Event& event,
         _sensors.emplace_back(std::make_shared<TachSensor>(
             mode, bus, *this, std::get<sensorNameField>(s),
             std::get<hasTargetField>(s), std::get<funcDelay>(def),
-            std::get<targetInterfaceField>(s), std::get<factorField>(s),
+            std::get<targetInterfaceField>(s), std::get<targetPathField>(s),
+            std::get<factorField>(s),
             std::get<offsetField>(s), std::get<methodField>(def),
             std::get<thresholdField>(s), std::get<ignoreAboveMaxField>(s),
             std::get<timeoutField>(def),
diff --git a/monitor/gen-fan-monitor-defs.py b/monitor/gen-fan-monitor-defs.py
index c771109..1118e83 100755
--- a/monitor/gen-fan-monitor-defs.py
+++ b/monitor/gen-fan-monitor-defs.py
@@ -67,6 +67,9 @@ const std::vector<FanDefinition> fanDefinitions
                       target_interface = sensor.get(
                           'target_interface',
                           'xyz.openbmc_project.Control.FanSpeed')
+                      target_path = sensor.get(
+                          'target_path',
+                          '')
                       factor = sensor.get('factor', 1)
                       offset = sensor.get('offset', 0)
                       threshold = sensor.get('threshold', 1)
@@ -76,6 +79,7 @@ const std::vector<FanDefinition> fanDefinitions
                       SensorDefinition{"${sensor['name']}",
                                        ${has_target},
                                        "${target_interface}",
+                                       "${target_path}",
                                        ${factor},
                                        ${offset},
                                        ${threshold},
diff --git a/monitor/json_parser.cpp b/monitor/json_parser.cpp
index 1144998..39f95ac 100644
--- a/monitor/json_parser.cpp
+++ b/monitor/json_parser.cpp
@@ -146,6 +146,12 @@ const std::vector<SensorDefinition> getSensorDefs(const json& sensors)
         {
             targetIntf = sensor["target_interface"].get<std::string>();
         }
+        // Target path is optional
+        std::string targetPath = "";
+        if (sensor.contains("target_path"))
+        {
+            targetPath = sensor["target_path"].get<std::string>();
+        }
         // Factor is optional and defaults to 1
         auto factor = 1.0;
         if (sensor.contains("factor"))
@@ -173,7 +179,7 @@ const std::vector<SensorDefinition> getSensorDefs(const json& sensors)
 
         sensorDefs.emplace_back(std::tuple(
             sensor["name"].get<std::string>(), sensor["has_target"].get<bool>(),
-            targetIntf, factor, offset, threshold, ignoreAboveMax));
+            targetIntf, targetPath, factor, offset, threshold, ignoreAboveMax));
     }
 
     return sensorDefs;
diff --git a/monitor/tach_sensor.cpp b/monitor/tach_sensor.cpp
index ec89d5b..da39d87 100644
--- a/monitor/tach_sensor.cpp
+++ b/monitor/tach_sensor.cpp
@@ -73,14 +73,16 @@ static void
 TachSensor::TachSensor([[maybe_unused]] Mode mode, sdbusplus::bus::bus& bus,
                        Fan& fan, const std::string& id, bool hasTarget,
                        size_t funcDelay, const std::string& interface,
-                       double factor, int64_t offset, size_t method,
+                       const std::string& targetPath, double factor,
+                       int64_t offset, size_t method,
                        size_t threshold, bool ignoreAboveMax, size_t timeout,
                        const std::optional<size_t>& errorDelay,
                        size_t countInterval, const sdeventplus::Event& event) :
     _bus(bus),
     _fan(fan), _name(FAN_SENSOR_PATH + id),
     _invName(fs::path(fan.getName()) / id), _hasTarget(hasTarget),
-    _funcDelay(funcDelay), _interface(interface), _factor(factor),
+    _funcDelay(funcDelay), _interface(interface), _path(targetPath),
+    _factor(factor),
     _offset(offset), _method(method), _threshold(threshold),
     _ignoreAboveMax(ignoreAboveMax), _timeout(timeout),
     _timerMode(TimerMode::func),
@@ -111,7 +113,7 @@ TachSensor::TachSensor([[maybe_unused]] Mode mode, sdbusplus::bus::bus& bus,
             // object can be functional with a missing D-bus sensor.
         }
 
-        auto match = getMatchString(util::FAN_SENSOR_VALUE_INTF);
+        auto match = getMatchString(_name, util::FAN_SENSOR_VALUE_INTF);
 
         tachSignal = std::make_unique<sdbusplus::bus::match_t>(
             _bus, match.c_str(),
@@ -119,7 +121,14 @@ TachSensor::TachSensor([[maybe_unused]] Mode mode, sdbusplus::bus::bus& bus,
 
         if (_hasTarget)
         {
-            match = getMatchString(_interface);
+            if (_path.empty())
+	    {
+                match = getMatchString(_name, _interface);
+	    }
+	    else
+	    {
+                match = getMatchString(_path, _interface);
+	    }
 
             targetSignal = std::make_unique<sdbusplus::bus::match_t>(
                 _bus, match.c_str(),
@@ -153,7 +162,16 @@ void TachSensor::updateTachAndTarget()
 
     if (_hasTarget)
     {
-        readProperty(_interface, FAN_TARGET_PROPERTY, _name, _bus, _tachTarget);
+        if (_path.empty())
+	{
+	    // Target path is optional and defaults to full path
+	    // For example /xyz/openbmc_project/sensors/fan_tach/fan0
+	    readProperty(_interface, FAN_TARGET_PROPERTY, _name, _bus, _tachTarget);
+	}
+	else
+	{
+            readProperty(_interface, FAN_TARGET_PROPERTY, _path, _bus, _tachTarget);
+	}
 
         // record previous target value
         if (_prevTargets.front() != _tachTarget)
@@ -170,9 +188,9 @@ void TachSensor::updateTachAndTarget()
     _prevTachs.pop_back();
 }
 
-std::string TachSensor::getMatchString(const std::string& interface)
+std::string TachSensor::getMatchString(const std::string& path, const std::string& interface)
 {
-    return sdbusplus::bus::match::rules::propertiesChanged(_name, interface);
+    return sdbusplus::bus::match::rules::propertiesChanged(path, interface);
 }
 
 uint64_t TachSensor::getTarget() const
diff --git a/monitor/tach_sensor.hpp b/monitor/tach_sensor.hpp
index f3619be..12222db 100644
--- a/monitor/tach_sensor.hpp
+++ b/monitor/tach_sensor.hpp
@@ -92,6 +92,7 @@ class TachSensor
      * @param[in] hasTarget - if the sensor supports
      *                        setting the speed
      * @param[in] funcDelay - Delay to mark functional
+     * @param[in] path - the path of the target
      * @param[in] interface - the interface of the target
      * @param[in] factor - the factor of the sensor target
      * @param[in] offset - the offset of the sensor target
@@ -107,7 +108,8 @@ class TachSensor
      */
     TachSensor(Mode mode, sdbusplus::bus::bus& bus, Fan& fan,
                const std::string& id, bool hasTarget, size_t funcDelay,
-               const std::string& interface, double factor, int64_t offset,
+               const std::string& interface, const std::string& path,
+               double factor, int64_t offset,
                size_t method, size_t threshold, bool ignoreAboveMax,
                size_t timeout, const std::optional<size_t>& errorDelay,
                size_t countInterval, const sdeventplus::Event& event);
@@ -190,6 +192,13 @@ class TachSensor
         _hasOwner = val;
     }
 
+    /**
+     * @brief Returns the path of the sensor target
+     */
+    inline std::string getPath() const
+    {
+        return _path;
+    }
     /**
      * @brief Returns the factor of the sensor target
      */
@@ -386,7 +395,7 @@ class TachSensor
      * @brief Returns the match string to use for matching
      *        on a properties changed signal.
      */
-    std::string getMatchString(const std::string& interface);
+    std::string getMatchString(const std::string& path, const std::string& interface);
 
     /**
      * @brief Reads the Target property and stores in _tachTarget.
@@ -461,6 +470,11 @@ class TachSensor
      */
     const std::string _interface;
 
+    /**
+     * @brief The interface that the target implements
+     */
+    const std::string _path;
+
     /**
      * @brief The factor of target to get fan rpm
      */
diff --git a/monitor/trust_group.hpp b/monitor/trust_group.hpp
index 53ed610..2f30169 100644
--- a/monitor/trust_group.hpp
+++ b/monitor/trust_group.hpp
@@ -69,7 +69,7 @@ class Group
     {
         auto found = std::find_if(
             _names.begin(), _names.end(), [&sensor](const auto& name) {
-                return monitor::FAN_SENSOR_PATH + std::get<sensorName>(name) ==
+                return sensor->getPath() ==
                        sensor->name();
             });
 
diff --git a/monitor/types.hpp b/monitor/types.hpp
index 1f4b84c..0c586ed 100644
--- a/monitor/types.hpp
+++ b/monitor/types.hpp
@@ -105,13 +105,14 @@ using CreateGroupFunction = std::function<std::unique_ptr<trust::Group>()>;
 constexpr auto sensorNameField = 0;
 constexpr auto hasTargetField = 1;
 constexpr auto targetInterfaceField = 2;
-constexpr auto factorField = 3;
-constexpr auto offsetField = 4;
-constexpr auto thresholdField = 5;
-constexpr auto ignoreAboveMaxField = 6;
-
-using SensorDefinition =
-    std::tuple<std::string, bool, std::string, double, int64_t, size_t, bool>;
+constexpr auto targetPathField = 3;
+constexpr auto factorField = 4;
+constexpr auto offsetField = 5;
+constexpr auto thresholdField = 6;
+constexpr auto ignoreAboveMaxField = 7;
+
+using SensorDefinition = std::tuple<std::string, bool, std::string, std::string,
+                                    double, int64_t, size_t, bool>;
 
 constexpr auto fanNameField = 0;
 constexpr auto methodField = 1;
-- 
2.25.1

